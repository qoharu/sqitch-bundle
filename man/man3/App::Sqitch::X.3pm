.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::X 3"
.TH App::Sqitch::X 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::X \- Sqitch Exception class
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 6
\&  use Locale::TextDomain;
\&  use App::Sqitch::X qw(hurl);
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqfoo.txt\*(Aq or hurl {
\&      ident   => \*(Aqio\*(Aq,
\&      message => _\|_x \*(AqCannot open {file}: {err}", file => \*(Aqfoo.txt\*(Aq, err => $!,
\&  };
.Ve
.PP
Developer:
.PP
.Vb 1
\&  hurl \*(AqOdd number of arguments passed to burf()\*(Aq if @_ % 2;
.Ve
.SH "Description"
.IX Header "Description"
This module provides implements Sqitch exceptions. Exceptions may be thrown by
any part of the code, and, as long as a command is running, they will be
handled, showing the error message to the user.
.SH "Interface"
.IX Header "Interface"
.SS "Function"
.IX Subsection "Function"
\fI\f(CI\*(C`hurl\*(C'\fI\fR
.IX Subsection "hurl"
.PP
Throws an exception. Pass the parameters as a hash reference, like so:
.PP
.Vb 5
\&  use App::Sqitch::X qw(hurl);
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqfoo.txt\*(Aq or hurl {
\&      ident   => \*(Aqio\*(Aq,
\&      message => _\|_x \*(AqCannot open {file}: {err}", file => \*(Aqfoo.txt\*(Aq, err => $!,
\&  };
.Ve
.PP
More simply, if all you need to pass are the \f(CW\*(C`ident\*(C'\fR and \f(CW\*(C`message\*(C'\fR
parameters, you can pass them as the only arguments to \f(CW\*(C`hurl()\*(C'\fR:
.PP
.Vb 2
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqfoo.txt\*(Aq
\&    or hurl io => _\|_x \*(AqCannot open {file}: {err}", file => \*(Aqfoo.txt\*(Aq, err => $!
.Ve
.PP
For errors that should only happen during development (e.g., an invalid
parameter passed by some other library that should know better), you can omit
the \f(CW\*(C`ident\*(C'\fR:
.PP
.Vb 1
\&  hurl \*(AqOdd number of arguments passed to burf()\*(Aq if @_ % 2;
.Ve
.PP
In this case, the \f(CW\*(C`ident\*(C'\fR will be \f(CW\*(C`DEV\*(C'\fR, which you should not otherwise use.
Sqitch will emit a more detailed error message, including a stack trace, when
it sees \f(CW\*(C`DEV\*(C'\fR exceptions.
.PP
The supported parameters are:
.ie n .IP """ident""" 4
.el .IP "\f(CWident\fR" 4
.IX Item "ident"
A non-localized string identifying the type of exception.
.ie n .IP """message""" 4
.el .IP "\f(CWmessage\fR" 4
.IX Item "message"
The exception message. Use Locale::TextDomain to craft localized messages.
.ie n .IP """exitval""" 4
.el .IP "\f(CWexitval\fR" 4
.IX Item "exitval"
Suggested exit value to use. Defaults to 2. This will be used if Sqitch
handles an exception while a command is running.
.SS "Methods"
.IX Subsection "Methods"
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
.Vb 1
\&  my $errstr = $x\->as_string;
.Ve
.PP
Returns the stringified representation of the exception. This value is also
used for string overloading of the exception object, which means it is the
output shown for uncaught exceptions. Its contents are the concatenation of
the exception message, the previous exception (if any), and the stack trace.
.SH "Handling Exceptions"
.IX Header "Handling Exceptions"
use Try::Tiny to do exception handling, like so:
.PP
.Vb 10
\&  use Try::Tiny;
\&  try {
\&      # ...
\&  } catch {
\&      die $_ unless eval { $_\->isa(\*(AqApp::Sqitch::X\*(Aq) };
\&      $sqitch\->vent($x_\->message);
\&      if ($_\->ident eq \*(AqDEV\*(Aq) {
\&          $sqitch\->vent($_\->stack_trace\->as_string);
\&      } else {
\&          $sqitch\->debug($_\->stack_trace\->as_string);
\&      }
\&      exit $_\->exitval;
\&  };
.Ve
.PP
Use the \f(CW\*(C`ident\*(C'\fR attribute to determine what category of exception it is, and
take changes as appropriate.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
