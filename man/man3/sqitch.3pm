.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sqitch 3"
.TH sqitch 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
sqitch \- Sensible database change management
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  sqitch <command> [options] [command\-options] [args]
.Ve
.SH "Description"
.IX Header "Description"
Sqitch is a database change management application. What makes it different
from your typical migration\-style
approaches? A few things:
.IP "No opinions" 4
.IX Item "No opinions"
Sqitch is not tied to any framework, \s-1ORM,\s0 or platform. Rather, it is a
standalone change management system with no opinions about your database
engine, application framework, or development environment.
.IP "Native scripting" 4
.IX Item "Native scripting"
Changes are implemented as scripts native to your selected database engine.
Writing a PostgreSQL <https://postgresql.org/> application? Write \s-1SQL\s0 scripts
for \f(CW\*(C`psql\*(C'\fR <https://www.postgresql.org/docs/current/static/app-psql.html>.
Writing an Oracle <https://www.oracle.com/us/products/database/>\-backed app?
Write \s-1SQL\s0 scripts for SQL*Plus <https://www.orafaq.com/wiki/SQL*Plus>.
.IP "Dependency resolution" 4
.IX Item "Dependency resolution"
Database changes may declare dependencies on other changes \*(-- even on changes
from other Sqitch projects. This ensures proper order of execution, even when
you've committed changes to your \s-1VCS\s0 out-of-order.
.IP "Deployment integrity" 4
.IX Item "Deployment integrity"
Sqitch manages changes and dependencies via a plan file, and employs a
Merkle tree <https://en.wikipedia.org/wiki/Merkle_tree> pattern similar to
Git <https://stackoverflow.com/a/18589734/> and
Blockchain <https://medium.com/byzantine-studio/blockchain-fundamentals-what-is-a-merkle-tree-d44c529391d7>
to ensure deployment integrity. As such, there is no need to number your
changes, although you can if you want. Sqitch doesn't much care how you name
your changes.
.IP "Iterative Development" 4
.IX Item "Iterative Development"
Up until you tag and release your project, you
can modify your change deployment scripts as often as you like. They're not
locked in just because they've been committed to your \s-1VCS.\s0 This allows you to
take an iterative approach to developing your database schema. Or, better, you
can do test-driven database development.
.PP
Ready to get started? Here's where:
.IP "Sqitch Tutorials" 4
.IX Item "Sqitch Tutorials"
Detailed tutorials demonstrating the creation, development, and maintenance
of a database with Sqitch.
.RS 4
.IP "\(bu" 4
PostgreSQL Tutorial
.IP "\(bu" 4
SQLite Tutorial
.IP "\(bu" 4
MySQL Tutorial
.IP "\(bu" 4
Oracle Tutorial
.IP "\(bu" 4
Firebird Tutorial
.IP "\(bu" 4
Vertica Tutorial
.IP "\(bu" 4
Exasol Tutorial
.IP "\(bu" 4
Snowflake Tutorial
.RE
.RS 4
.RE
.IP "\s-1PDX\s0.pm Presentation <https://speakerdeck.com/theory/sane-database-change-management-with-sqitch>" 4
.IX Item "PDX.pm Presentation <https://speakerdeck.com/theory/sane-database-change-management-with-sqitch>"
Slides from \*(L"Sane Database Management with Sqitch\*(R", presented to the Portland
Perl Mongers in January, 2013.
.IP "\s-1PDXPUG\s0 Presentation <https://vimeo.com/50104469>" 4
.IX Item "PDXPUG Presentation <https://vimeo.com/50104469>"
Movie of \*(L"Sane Database Management with Sqitch\*(R", presented to the Portland
PostgreSQL Users Group in September, 2012.
.IP "Agile Database Development <https://speakerdeck.com/theory/agile-database-development-2ed>" 4
.IX Item "Agile Database Development <https://speakerdeck.com/theory/agile-database-development-2ed>"
Three-hour tutorial session on using Git <https://git-scm.org/>, test-driven
development with pgTAP <https://pgtap.org>, and change management with Sqitch.
.SS "Terminology"
.IX Subsection "Terminology"
.ie n .IP """change""" 4
.el .IP "\f(CWchange\fR" 4
.IX Item "change"
A named unit of change. A change name must be used in the file names of its
deploy and a revert scripts. It may also be used in a verify script file
name.
.ie n .IP """tag""" 4
.el .IP "\f(CWtag\fR" 4
.IX Item "tag"
A known deployment state, pointing to a single change, typically corresponding
to a release. Think of it is a version number or \s-1VCS\s0 revision. A given point
in the plan may have any number of tags.
.ie n .IP """state""" 4
.el .IP "\f(CWstate\fR" 4
.IX Item "state"
The current state of the database. This is represented by the most
recently-deployed change. If the state of the database is the same as the most
recent change, then it is considered \*(L"up-to-date\*(R".
.ie n .IP """plan""" 4
.el .IP "\f(CWplan\fR" 4
.IX Item "plan"
A list of one or more changes and their dependencies that define the order of
deployment execution. The plan is stored in a \*(L"plan file,\*(R" usually named
\&\fIsqitch.plan\fR. Sqitch reads the plan file to determine what changes to
execute to change the database from one state to another.
.ie n .IP """target""" 4
.el .IP "\f(CWtarget\fR" 4
.IX Item "target"
A named database to which to deploy changes. Always has an associated
connection \s-1URI,\s0 and may also have an associated command-line client and
registry name.
.ie n .IP """registry""" 4
.el .IP "\f(CWregistry\fR" 4
.IX Item "registry"
The name of the database object where Sqitch's state and history data is
stored. Typically a schema name (as in PostgreSQL and Oracle) or a database
name (as in SQLite and MySQL).
.ie n .IP """add""" 4
.el .IP "\f(CWadd\fR" 4
.IX Item "add"
The act of adding a change to the plan. Sqitch will generate scripts for the
change, which you then may modify with the necessary code (typically DDLs) to
actually deploy, revert, and verify the change.
.ie n .IP """deploy""" 4
.el .IP "\f(CWdeploy\fR" 4
.IX Item "deploy"
The act of deploying changes to a database. Sqitch reads the plan, checks the
current state of the database, and applies all the changes necessary to either
bring the database up-to-date or to a requested state (a change name or tag).
.ie n .IP """revert""" 4
.el .IP "\f(CWrevert\fR" 4
.IX Item "revert"
The act of reverting database changes to reach an earlier deployment state.
Sqitch reads the list of deployed changes from the database and reverts
them in the reverse of the order in which they were applied. All changes
may be reverted, or changes may be reverted to a requested state (a change
name or tag).
.ie n .IP """committer""" 4
.el .IP "\f(CWcommitter\fR" 4
.IX Item "committer"
User who commits or reverts changes to a database.
.ie n .IP """planner""" 4
.el .IP "\f(CWplanner\fR" 4
.IX Item "planner"
User who adds a change to the plan.
.SH "Options"
.IX Header "Options"
.Vb 8
\&  \-C \-\-chdir \-\-cd DIR       Change to directory before performing any actions.
\&     \-\-etc\-path             Print path to etc directory and exit.
\&     \-\-no\-pager             Do not pipe output into a pager.
\&     \-\-quiet                Quiet mode with non\-error output suppressed.
\&  \-V \-\-verbose              Increment verbosity.
\&     \-\-version              Print version number and exit.
\&     \-\-help                 Show a list of commands and exit.
\&     \-\-man                  Print introductory documentation and exit.
.Ve
.SH "Options Details"
.IX Header "Options Details"
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
.PD 0
.ie n .IP """\-\-cd""" 4
.el .IP "\f(CW\-\-cd\fR" 4
.IX Item "--cd"
.ie n .IP """\-C""" 4
.el .IP "\f(CW\-C\fR" 4
.IX Item "-C"
.PD
.Vb 3
\&  sqitch \-\-chdir dbproject
\&  sqitch \-\-cd /usr/local/somedb
\&  sqitch \-C dbcheckout
.Ve
.Sp
Change to the specified directory before performing any actions. Effectively the
same as:
.Sp
.Vb 1
\&  (cd somedir && sqitch ...)
.Ve
.Sp
But a bit friendlier when managing multiple projects.
.ie n .IP """\-\-etc\-path""" 4
.el .IP "\f(CW\-\-etc\-path\fR" 4
.IX Item "--etc-path"
.Vb 1
\&  sqitch \-\-etc\-path
.Ve
.Sp
Print out the path to the Sqitch \fIetc\fR directory and exit. This is the
directory where the system-wide configuration file lives, as well as change
script templates.
.ie n .IP """\-\-no\-pager""" 4
.el .IP "\f(CW\-\-no\-pager\fR" 4
.IX Item "--no-pager"
.Vb 1
\&  sqitch \-\-no\-pager
.Ve
.Sp
Do not pipe Sqitch output into a pager. Currently limited to the \f(CW\*(C`log\*(C'\fR and
\&\f(CW\*(C`plan\*(C'\fR commands.
.ie n .IP """\-\-quiet""" 4
.el .IP "\f(CW\-\-quiet\fR" 4
.IX Item "--quiet"
.Vb 1
\&  sqitch \-\-quiet
.Ve
.Sp
Suppress normal output messages. Error messages will still be emitted to
\&\f(CW\*(C`STDERR\*(C'\fR. Overrides any value specified by \f(CW\*(C`\-\-verbose\*(C'\fR.
.ie n .IP """\-V""" 4
.el .IP "\f(CW\-V\fR" 4
.IX Item "-V"
.PD 0
.ie n .IP """\-\-verbose""" 4
.el .IP "\f(CW\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
.Vb 2
\&  sqitch \-\-verbose
\&  sqitch \-VVV
.Ve
.Sp
Pass multiple times to specify a value between 0 and 3 to determine how
verbose Sqitch should be. Unless \f(CW\*(C`\-\-quiet\*(C'\fR is specified, the default is 1,
meaning that Sqitch will output basic status messages as it does its thing.
Values of 2 and 3 each cause greater verbosity. Ignored if \f(CW\*(C`\-\-quiet\*(C'\fR is
specified.
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
.Vb 1
\&  sqitch \-\-help
.Ve
.Sp
Outputs a brief description all known Sqitch commands and exits.
.ie n .IP """\-\-man""" 4
.el .IP "\f(CW\-\-man\fR" 4
.IX Item "--man"
.Vb 1
\&  sqitch \-\-man
.Ve
.Sp
Outputs this documentation and exits.
.ie n .IP """\-\-version""" 4
.el .IP "\f(CW\-\-version\fR" 4
.IX Item "--version"
.Vb 1
\&  sqitch \-\-version
.Ve
.Sp
Outputs the program name and version and exits.
.SH "Sqitch Commands"
.IX Header "Sqitch Commands"
.ie n .IP """init""" 4
.el .IP "\f(CWinit\fR" 4
.IX Item "init"
Create the plan file and directories for deploy, revert, and verify scripts if
they do not already exist. This command is useful for starting a new Sqitch
project.
.ie n .IP """status""" 4
.el .IP "\f(CWstatus\fR" 4
.IX Item "status"
Output information about the current deployment state of a database, including
the name of the last deployed change, as well as any tags applied to it. If
any changes in the plan have not been deployed, they will be listed
separately.
.ie n .IP """log""" 4
.el .IP "\f(CWlog\fR" 4
.IX Item "log"
Search and Output the complete change history of a database. Provides
information about when changes were deployed, reverted, or failed, as well as
who planned and committed the changes, and when.
.ie n .IP """add""" 4
.el .IP "\f(CWadd\fR" 4
.IX Item "add"
Add a new change.
.ie n .IP """tag""" 4
.el .IP "\f(CWtag\fR" 4
.IX Item "tag"
List tags or tag the latest change.
.ie n .IP """rework""" 4
.el .IP "\f(CWrework\fR" 4
.IX Item "rework"
Rework an existing change.
.ie n .IP """target""" 4
.el .IP "\f(CWtarget\fR" 4
.IX Item "target"
Manage target databases.
.ie n .IP """deploy""" 4
.el .IP "\f(CWdeploy\fR" 4
.IX Item "deploy"
Deploy changes to a database
.ie n .IP """revert""" 4
.el .IP "\f(CWrevert\fR" 4
.IX Item "revert"
Revert changes from a database.
.ie n .IP """verify""" 4
.el .IP "\f(CWverify\fR" 4
.IX Item "verify"
Verify changes deployed to a database.
.ie n .IP """config""" 4
.el .IP "\f(CWconfig\fR" 4
.IX Item "config"
Get and set project, user, or system Sqitch options.
.ie n .IP """bundle""" 4
.el .IP "\f(CWbundle\fR" 4
.IX Item "bundle"
Bundle a Sqitch project for distribution. This command copies the Sqitch
configuration, plan, and deploy, revert, and verify scripts to a directory, so
that it can be packaged up for distribution, such as in an \s-1RPM\s0 or tarball.
.ie n .IP """help""" 4
.el .IP "\f(CWhelp\fR" 4
.IX Item "help"
Show help for a specific command or, if no command is specified, show the same
documentation as \f(CW\*(C`\-\-help\*(C'\fR.
.SH "Configuration"
.IX Header "Configuration"
Sqitch configuration can be set up on a project, user, or system-wide basis.
The format of the configuration file, named \fIsqitch.conf\fR, is the same as for
git.
.PP
Here's an example of a configuration file that might be useful checked into a
\&\s-1VCS\s0 for a project that deploys to PostgreSQL and stores its deployment scripts
with the extension \fIddl\fR under the \f(CW\*(C`migrations\*(C'\fR directory. It also wants
bundle to be created in the \fI_build/sql\fR directory, and to deploy starting
with the \*(L"gamma\*(R" tag:
.PP
.Vb 4
\&  [core]
\&      engine    = pg
\&      top_dir   = migrations
\&      extension = ddl
\&
\&  [engine "pg"]
\&      target    = widgetopolis
\&
\&  [revert]
\&      to        = gamma
\&
\&  [bundle]
\&      from      = gamma
\&      tags_only = yes
\&      dest_dir  = _build/sql
\&
\&  [target "widgetopolis"]
\&      uri       = db:pg:widgetopolis
.Ve
.PP
And here's an example of useful configuration in \fI~/.sqitch/sqitch.conf\fR, to
point to system-specific engine information:
.PP
.Vb 3
\&  [user]
\&      name      = Marge N. OXVera
\&      email     = marge@example.com
\&
\&  [engine "pg"]
\&      client    = /usr/local/pgsql/bin/psql
\&
\&  [engine "mysql"]
\&      client    = /usr/local/mysql/bin/mysql
\&
\&  [engine "oracle"]
\&      client    = /usr/local/instantclient_11_2/sqlplus
\&
\&  [engine "sqlite"]
\&      client    = /usr/local/bin/sqlite3
.Ve
.PP
Various commands read from the configuration file and adjust their operation
accordingly. See sqitch-config for a list.
.SH "See Also"
.IX Header "See Also"
The original design for Sqitch was sketched out in a number of blog posts:
.IP "\(bu" 4
Simple \s-1SQL\s0 Change Management <https://justatheory.com/computers/databases/simple-sql-change-management.html>
.IP "\(bu" 4
VCS-Enabled \s-1SQL\s0 Change Management <https://justatheory.com/computers/databases/vcs-sql-change-management.html>
.IP "\(bu" 4
\&\s-1SQL\s0 Change Management Sans Duplication <https://justatheory.com/computers/databases/sql-change-management-sans-redundancy.html>
.PP
Other tools that do database change management include:
.IP "Rails migrations <https://guides.rubyonrails.org/migrations.html>" 4
.IX Item "Rails migrations <https://guides.rubyonrails.org/migrations.html>"
Numbered migrations for Ruby on Rails <https://rubyonrails.org/>.
.IP "Module::Build::DB" 4
.IX Item "Module::Build::DB"
Numbered changes in pure \s-1SQL,\s0 integrated with Perl's Module::Build build
system. Does not support reversion.
.IP "DBIx::Migration" 4
.IX Item "DBIx::Migration"
Numbered migrations in pure \s-1SQL.\s0
.IP "Versioning <https://www.depesz.com/2010/08/22/versioning/>" 4
.IX Item "Versioning <https://www.depesz.com/2010/08/22/versioning/>"
PostgreSQL-specific dependency-tracking solution by
depesz <https://www.depesz.com/>.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
