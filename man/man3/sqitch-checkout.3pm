.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sqitch-checkout 3"
.TH sqitch-checkout 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
sqitch-checkout \- Revert, checkout another \s-1VCS\s0 branch, and re-deploy changes
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  sqitch checkout [options] [<database>] <branch>
.Ve
.SH "Description"
.IX Header "Description"
Checkout another branch in your project's \s-1VCS\s0 (such as
git <https://git-scm.org/>), while performing the necessary database changes
to update your database for the new branch.
.PP
More specifically, the \f(CW\*(C`checkout\*(C'\fR command compares the plan in the current
branch to that in the branch to check out, identifies the last common changes
between them, reverts to that change as if \f(CW\*(C`sqitch revert\*(C'\fR
was called (unless there have been no changes deployed since that change),
checks out the new branch, and then deploys all changes as if
\&\f(CW\*(C`sqitch deploy\*(C'\fR had been called.
.PP
If the \s-1VCS\s0 is already on the specified branch, nothing will be done.
.PP
The \f(CW\*(C`<database>\*(C'\fR parameter specifies the database to which to connect,
and may also be specified as the \f(CW\*(C`\-\-target\*(C'\fR option. It can be target name,
a \s-1URI,\s0 an engine name, or plan file path.
.SH "Options"
.IX Header "Options"
.ie n .IP """\-t""" 4
.el .IP "\f(CW\-t\fR" 4
.IX Item "-t"
.PD 0
.ie n .IP """\-\-target""" 4
.el .IP "\f(CW\-\-target\fR" 4
.IX Item "--target"
.PD
The target database to which to connect. This option can be either a \s-1URI\s0 or
the name of a target in the configuration.
.ie n .IP """\-\-mode""" 4
.el .IP "\f(CW\-\-mode\fR" 4
.IX Item "--mode"
Specify the reversion mode to use in case of failure. Possible values are:
.RS 4
.ie n .IP """all""" 4
.el .IP "\f(CWall\fR" 4
.IX Item "all"
In the event of failure, revert all deployed changes, back to the point at
which deployment started. This is the default.
.ie n .IP """tag""" 4
.el .IP "\f(CWtag\fR" 4
.IX Item "tag"
In the event of failure, revert all deployed changes to the last
successfully-applied tag. If no tags were applied during this deployment, all
changes will be reverted to the point at which deployment began.
.ie n .IP """change""" 4
.el .IP "\f(CWchange\fR" 4
.IX Item "change"
In the event of failure, no changes will be reverted. This is on the
assumption that a change is atomic, and thus may may be deployed again.
.RE
.RS 4
.RE
.ie n .IP """\-\-verify""" 4
.el .IP "\f(CW\-\-verify\fR" 4
.IX Item "--verify"
Verify each change by running its verify script, if there is one. If a verify
test fails, the deploy will be considered to have failed and the appropriate
reversion will be carried out, depending on the value of \f(CW\*(C`\-\-mode\*(C'\fR.
.ie n .IP """\-\-no\-verify""" 4
.el .IP "\f(CW\-\-no\-verify\fR" 4
.IX Item "--no-verify"
Don't verify each change. This is the default.
.ie n .IP """\-s""" 4
.el .IP "\f(CW\-s\fR" 4
.IX Item "-s"
.PD 0
.ie n .IP """\-\-set""" 4
.el .IP "\f(CW\-\-set\fR" 4
.IX Item "--set"
.PD
Set a variable name and value for use by the database engine client, if it
supports variables. The format must be \f(CW\*(C`name=value\*(C'\fR, e.g.,
\&\f(CW\*(C`\-\-set defuser=\*(AqHomer Simpson\*(Aq\*(C'\fR. Overrides any values loaded from
\&\*(L"Configuration Variables\*(R".
.ie n .IP """\-e""" 4
.el .IP "\f(CW\-e\fR" 4
.IX Item "-e"
.PD 0
.ie n .IP """\-\-set\-deploy""" 4
.el .IP "\f(CW\-\-set\-deploy\fR" 4
.IX Item "--set-deploy"
.PD
Set a variable name and value for use by the database engine client when
deploying, if it supports variables. The format must be \f(CW\*(C`name=value\*(C'\fR, e.g.,
\&\f(CW\*(C`\-\-set defuser=\*(AqHomer Simpson\*(Aq\*(C'\fR. Overrides any values from \f(CW\*(C`\-\-set\*(C'\fR or values
loaded from \*(L"Configuration Variables\*(R".
.ie n .IP """\-r""" 4
.el .IP "\f(CW\-r\fR" 4
.IX Item "-r"
.PD 0
.ie n .IP """\-\-set\-revert""" 4
.el .IP "\f(CW\-\-set\-revert\fR" 4
.IX Item "--set-revert"
.PD
Sets a variable name to be used by the database engine client during when
reverting, if it supports variables. The format must be \f(CW\*(C`name=value\*(C'\fR, e.g.,
\&\f(CW\*(C`\-\-set defuser=\*(AqHomer Simpson\*(Aq\*(C'\fR. Overrides any values from \f(CW\*(C`\-\-set\*(C'\fR or values
loaded from \*(L"Configuration Variables\*(R".
.ie n .IP """\-\-log\-only""" 4
.el .IP "\f(CW\-\-log\-only\fR" 4
.IX Item "--log-only"
Log the changes as if they were deployed, but without actually running the
deploy scripts. Useful for an existing database that is being converted to
Sqitch, and you need to log changes as deployed because they have been
deployed by other means in the past.
.ie n .IP """\-y""" 4
.el .IP "\f(CW\-y\fR" 4
.IX Item "-y"
Disable the prompt that normally asks whether or not to execute the revert.
.ie n .IP """\-\-registry""" 4
.el .IP "\f(CW\-\-registry\fR" 4
.IX Item "--registry"
.Vb 1
\&  sqitch checkout \-\-registry registry
.Ve
.Sp
The name of the Sqitch registry schema or database in which sqitch stores its
own data.
.ie n .IP """\-\-db\-client""" 4
.el .IP "\f(CW\-\-db\-client\fR" 4
.IX Item "--db-client"
.PD 0
.ie n .IP """\-\-client""" 4
.el .IP "\f(CW\-\-client\fR" 4
.IX Item "--client"
.PD
.Vb 1
\&  sqitch checkout \-\-client /usr/local/pgsql/bin/psql
.Ve
.Sp
Path to the command-line client for the database engine. Defaults to a client
in the current path named appropriately for the database engine.
.ie n .IP """\-d""" 4
.el .IP "\f(CW\-d\fR" 4
.IX Item "-d"
.PD 0
.ie n .IP """\-\-db\-name""" 4
.el .IP "\f(CW\-\-db\-name\fR" 4
.IX Item "--db-name"
.PD
.Vb 2
\&  sqitch checkout \-\-db\-name widgets
\&  sqitch checkout \-d bricolage
.Ve
.Sp
Name of the database. In general, targets and URIs are
preferred, but this option can be used to override the database name in a
target.
.ie n .IP """\-u""" 4
.el .IP "\f(CW\-u\fR" 4
.IX Item "-u"
.PD 0
.ie n .IP """\-\-db\-user""" 4
.el .IP "\f(CW\-\-db\-user\fR" 4
.IX Item "--db-user"
.ie n .IP """\-\-db\-username""" 4
.el .IP "\f(CW\-\-db\-username\fR" 4
.IX Item "--db-username"
.PD
.Vb 3
\&  sqitch checkout \-\-db\-username root
\&  sqitch checkout \-\-db\-user postgres
\&  sqitch checkout \-u Mom
.Ve
.Sp
User name to use when connecting to the database. Does not apply to all
engines. In general, targets and URIs are preferred, but this
option can be used to override the user name in a target.
.ie n .IP """\-h""" 4
.el .IP "\f(CW\-h\fR" 4
.IX Item "-h"
.PD 0
.ie n .IP """\-\-db\-host""" 4
.el .IP "\f(CW\-\-db\-host\fR" 4
.IX Item "--db-host"
.PD
.Vb 2
\&  sqitch checkout \-\-db\-host db.example.com
\&  sqitch checkout \-h appdb.example.net
.Ve
.Sp
Host name to use when connecting to the database. Does not apply to all
engines. In general, targets and URIs are preferred, but this
option can be used to override the host name in a target.
.ie n .IP """\-p""" 4
.el .IP "\f(CW\-p\fR" 4
.IX Item "-p"
.PD 0
.ie n .IP """\-\-db\-port""" 4
.el .IP "\f(CW\-\-db\-port\fR" 4
.IX Item "--db-port"
.PD
.Vb 2
\&  sqitch checkout \-\-db\-port 7654
\&  sqitch checkout \-p 5431
.Ve
.Sp
Port number to connect to. Does not apply to all engines. In general,
targets and URIs are preferred, but this option can be used
to override the port in a target.
.ie n .IP """\-\-plan\-file""" 4
.el .IP "\f(CW\-\-plan\-file\fR" 4
.IX Item "--plan-file"
.PD 0
.ie n .IP """\-f""" 4
.el .IP "\f(CW\-f\fR" 4
.IX Item "-f"
.PD
.Vb 1
\&  sqitch checkout \-\-plan\-file my.plan
.Ve
.Sp
Path to the deployment plan file. Overrides target, engine, and core
configuration values. Defaults to \fI\f(CI$top_dir\fI/sqitch.plan\fR.
.SH "Configuration Variables"
.IX Header "Configuration Variables"
.ie n .IP """[deploy.variables]""" 4
.el .IP "\f(CW[deploy.variables]\fR" 4
.IX Item "[deploy.variables]"
.PD 0
.ie n .IP """[revert.variables]""" 4
.el .IP "\f(CW[revert.variables]\fR" 4
.IX Item "[revert.variables]"
.PD
A section defining database client variables. These variables are useful if
your database engine supports variables in scripts, such as PostgreSQL's
\&\f(CW\*(C`psql\*(C'\fR
variables <https://www.postgresql.org/docs/current/static/app-psql.html#APP-PSQL-INTERPOLATION>,
Vertica's \f(CW\*(C`vsql\*(C'\fR
variables <https://my.vertica.com/docs/7.1.x/HTML/index.htm#Authoring/ConnectingToHPVertica/vsql/Variables.htm>,
MySQL's user
variables <https://dev.mysql.com/doc/refman/5.6/en/user-variables.html>,
SQL*Plus's \f(CW\*(C`DEFINE\*(C'\fR
variables <https://docs.oracle.com/cd/B19306_01/server.102/b14357/ch12017.htm>,
and Snowflake's SnowSQL
variables <https://docs.snowflake.net/manuals/user-guide/snowsql-use.html#using-variables>.
.Sp
May be overridden by \f(CW\*(C`\-\-set\*(C'\fR, \f(CW\*(C`\-\-set\-deploy\*(C'\fR, \f(CW\*(C`\-\-set\-revert\*(C'\fR, or target and
engine configuration. Variables are merged in the following priority order:
.RS 4
.ie n .IP """\-\-set\-revert""" 4
.el .IP "\f(CW\-\-set\-revert\fR" 4
.IX Item "--set-revert"
Used only while reverting changes.
.ie n .IP """\-\-set\-deploy""" 4
.el .IP "\f(CW\-\-set\-deploy\fR" 4
.IX Item "--set-deploy"
Used only while deploying changes.
.ie n .IP """\-\-set""" 4
.el .IP "\f(CW\-\-set\fR" 4
.IX Item "--set"
Used while reverting and deploying changes.
.ie n .IP """target.$target.variables""" 4
.el .IP "\f(CWtarget.$target.variables\fR" 4
.IX Item "target.$target.variables"
Used while reverting and deploying changes.
.ie n .IP """engine.$engine.variables""" 4
.el .IP "\f(CWengine.$engine.variables\fR" 4
.IX Item "engine.$engine.variables"
Used while reverting and deploying changes.
.ie n .IP """revert.variables""" 4
.el .IP "\f(CWrevert.variables\fR" 4
.IX Item "revert.variables"
Used only while reverting changes.
.ie n .IP """deploy.variables""" 4
.el .IP "\f(CWdeploy.variables\fR" 4
.IX Item "deploy.variables"
Used while reverting and deploying changes.
.ie n .IP """core.variables""" 4
.el .IP "\f(CWcore.variables\fR" 4
.IX Item "core.variables"
Used while reverting and deploying changes.
.RE
.RS 4
.RE
.ie n .IP """checkout.verify""" 4
.el .IP "\f(CWcheckout.verify\fR" 4
.IX Item "checkout.verify"
.PD 0
.ie n .IP """deploy.verify""" 4
.el .IP "\f(CWdeploy.verify\fR" 4
.IX Item "deploy.verify"
.PD
Boolean indicating whether or not to verify each change after deploying it.
.ie n .IP """checkout.mode""" 4
.el .IP "\f(CWcheckout.mode\fR" 4
.IX Item "checkout.mode"
.PD 0
.ie n .IP """deploy.mode""" 4
.el .IP "\f(CWdeploy.mode\fR" 4
.IX Item "deploy.mode"
.PD
Deploy mode. The supported values are the same as for the \f(CW\*(C`\-\-mode\*(C'\fR option.
.ie n .IP """[checkout.no_prompt]""" 4
.el .IP "\f(CW[checkout.no_prompt]\fR" 4
.IX Item "[checkout.no_prompt]"
.PD 0
.ie n .IP """[revert.no_prompt]""" 4
.el .IP "\f(CW[revert.no_prompt]\fR" 4
.IX Item "[revert.no_prompt]"
.PD
A boolean value indicating whether or not to disable the prompt before
executing the revert. The \f(CW\*(C`checkout.no_prompt\*(C'\fR variable takes precedence over
\&\f(CW\*(C`revert.no_prompt\*(C'\fR, and both may of course be overridden by \f(CW\*(C`\-y\*(C'\fR.
.ie n .IP """[checkout.prompt_accept]""" 4
.el .IP "\f(CW[checkout.prompt_accept]\fR" 4
.IX Item "[checkout.prompt_accept]"
.PD 0
.ie n .IP """[revert.prompt_accept]""" 4
.el .IP "\f(CW[revert.prompt_accept]\fR" 4
.IX Item "[revert.prompt_accept]"
.PD
A boolean value indicating whether default reply to the prompt before
executing the revert should be \*(L"yes\*(R" or \*(L"no\*(R". The \f(CW\*(C`checkout.prompt_accept\*(C'\fR
variable takes precedence over \f(CW\*(C`revert.prompt_accept\*(C'\fR, and both default to
true, meaning to accept the revert.
.SH "Sqitch"
.IX Header "Sqitch"
Part of the sqitch suite.
