.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::DateTime 3"
.TH App::Sqitch::DateTime 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::DateTime \- Sqitch DateTime object
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 2
\&  my $dt = App::Sqitch::DateTime\->new(%params);
\&  say $dt\->as_string( format => \*(Aqiso\*(Aq );
.Ve
.SH "Description"
.IX Header "Description"
This subclass of DateTime provides additional interfaces to support named
formats. These can be used for status or log
\&\f(CW\*(C`\-\-date\-format\*(C'\fR options. App::Sqitch::DateTime provides a list of supported
formats, validates that a format string, and uses the formats to convert
itself into the appropriate string.
.SH "Interface"
.IX Header "Interface"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`as_string_formats\*(C'\fI\fR
.IX Subsection "as_string_formats"
.PP
.Vb 1
\&  my @formats = App::Sqitch::DateTime\->as_string_formats;
.Ve
.PP
Returns a list of formats supported by the \f(CW\*(C`format\*(C'\fR parameter to
\&\f(CW\*(C`as_string\*(C'\fR. The list currently includes:
.ie n .IP """iso""" 4
.el .IP "\f(CWiso\fR" 4
.IX Item "iso"
.PD 0
.ie n .IP """iso8601""" 4
.el .IP "\f(CWiso8601\fR" 4
.IX Item "iso8601"
.PD
\&\s-1ISO\-8601\s0 format.
.ie n .IP """rfc""" 4
.el .IP "\f(CWrfc\fR" 4
.IX Item "rfc"
.PD 0
.ie n .IP """rfc2822""" 4
.el .IP "\f(CWrfc2822\fR" 4
.IX Item "rfc2822"
.PD
\&\s-1RFC\-2822\s0 format.
.ie n .IP """full""" 4
.el .IP "\f(CWfull\fR" 4
.IX Item "full"
.PD 0
.ie n .IP """long""" 4
.el .IP "\f(CWlong\fR" 4
.IX Item "long"
.ie n .IP """medium""" 4
.el .IP "\f(CWmedium\fR" 4
.IX Item "medium"
.ie n .IP """short""" 4
.el .IP "\f(CWshort\fR" 4
.IX Item "short"
.PD
Localized format of the specified length.
.ie n .IP """raw""" 4
.el .IP "\f(CWraw\fR" 4
.IX Item "raw"
Show timestamps in raw format, which is strict \s-1ISO\-8601\s0 in the \s-1UTC\s0 time zone.
.ie n .IP """strftime:$string""" 4
.el .IP "\f(CWstrftime:$string\fR" 4
.IX Item "strftime:$string"
Show timestamps using an arbitrary \f(CW\*(C`strftime\*(C'\fR pattern. See
\&\*(L"strftime Paterns\*(R" in DateTime for comprehensive documentation of supported
patterns.
.ie n .IP """cldr:$string""" 4
.el .IP "\f(CWcldr:$string\fR" 4
.IX Item "cldr:$string"
Show timestamps using an arbitrary \f(CW\*(C`cldr\*(C'\fR pattern. See \*(L"\s-1CLDR\s0
Paterns\*(R" in DateTime for comprehensive documentation of supported patterns.
.PP
\fI\f(CI\*(C`validate_as_string_format\*(C'\fI\fR
.IX Subsection "validate_as_string_format"
.PP
.Vb 1
\&  App::Sqitch::DateTime\->validate_as_string_format($format);
.Ve
.PP
Validates that a format is supported by \f(CW\*(C`as_string\*(C'\fR. Throws an exception if
it's not, and returns if it is.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
.Vb 2
\&  $dt\->as_string;
\&  $dt\->as_string( format => $format );
.Ve
.PP
Returns a string representation using the provided format. The format must be
one of those listed by \f(CW\*(C`as_string_formats\*(C'\fR or an exception will be thrown. If
no format is passed, the string will be formatted with the \f(CW\*(C`raw\*(C'\fR format.
.SH "See Also"
.IX Header "See Also"
.IP "sqitch-status" 4
.IX Item "sqitch-status"
Documentation for the \f(CW\*(C`status\*(C'\fR command to the Sqitch command-line client.
.IP "sqitch-log" 4
.IX Item "sqitch-log"
Documentation for the \f(CW\*(C`log\*(C'\fR command to the Sqitch command-line client.
.IP "sqitch" 4
.IX Item "sqitch"
The Sqitch command-line client.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
