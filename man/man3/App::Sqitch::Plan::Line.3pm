.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Plan::Line 3"
.TH App::Sqitch::Plan::Line 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Plan::Line \- Sqitch deployment plan line
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 4
\&  my $plan = App::Sqitch::Plan\->new( sqitch => $sqitch );
\&  for my $line ($plan\->lines) {
\&      say $line\->as_string;
\&  }
.Ve
.SH "Description"
.IX Header "Description"
An App::Sqitch::Plan::Line represents a single line from a Sqitch plan file.
Each object managed by an App::Sqitch::Plan object is derived from this
class. This is actually an abstract base class. See
App::Sqitch::Plan::Change, App::Sqitch::Plan::Tag, and
App::Sqitch::Plan::Blank for concrete subclasses.
.SH "Interface"
.IX Header "Interface"
.SS "Constructors"
.IX Subsection "Constructors"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  my $plan = App::Sqitch::Plan::Line\->new(%params);
.Ve
.PP
Instantiates and returns a App::Sqitch::Plan::Line object. Parameters:
.ie n .IP """plan""" 4
.el .IP "\f(CWplan\fR" 4
.IX Item "plan"
The App::Sqitch::Plan object with which the line is associated.
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
The name of the line. Should be empty for blank lines. Tags names should
not include the leading \f(CW\*(C`@\*(C'\fR.
.ie n .IP """lspace""" 4
.el .IP "\f(CWlspace\fR" 4
.IX Item "lspace"
The white space from the beginning of the line, if any.
.ie n .IP """lopspace""" 4
.el .IP "\f(CWlopspace\fR" 4
.IX Item "lopspace"
The white space to the left of the operator, if any.
.ie n .IP """operator""" 4
.el .IP "\f(CWoperator\fR" 4
.IX Item "operator"
An operator, if any.
.ie n .IP """ropspace""" 4
.el .IP "\f(CWropspace\fR" 4
.IX Item "ropspace"
The white space to the right of the operator, if any.
.ie n .IP """rspace""" 4
.el .IP "\f(CWrspace\fR" 4
.IX Item "rspace"
The white space after the name until the end of the line or the start of a
note.
.ie n .IP """note""" 4
.el .IP "\f(CWnote\fR" 4
.IX Item "note"
A note. Does not include the leading \f(CW\*(C`#\*(C'\fR, but does include any white space
immediate after the \f(CW\*(C`#\*(C'\fR when the plan file is parsed.
.SS "Accessors"
.IX Subsection "Accessors"
\fI\f(CI\*(C`plan\*(C'\fI\fR
.IX Subsection "plan"
.PP
.Vb 1
\&  my $plan = $line\->plan;
.Ve
.PP
Returns the plan object with which the line object is associated.
.PP
\fI\f(CI\*(C`name\*(C'\fI\fR
.IX Subsection "name"
.PP
.Vb 1
\&  my $name = $line\->name;
.Ve
.PP
Returns the name of the line. Returns an empty string if there is no name.
.PP
\fI\f(CI\*(C`lspace\*(C'\fI\fR
.IX Subsection "lspace"
.PP
.Vb 1
\&  my $lspace = $line\->lspace.
.Ve
.PP
Returns the white space from the beginning of the line, if any.
.PP
\fI\f(CI\*(C`rspace\*(C'\fI\fR
.IX Subsection "rspace"
.PP
.Vb 1
\&  my $rspace = $line\->rspace.
.Ve
.PP
Returns the white space after the name until the end of the line or the start
of a note.
.PP
\fI\f(CI\*(C`note\*(C'\fI\fR
.IX Subsection "note"
.PP
.Vb 1
\&  my $note = $line\->note.
.Ve
.PP
Returns the note. Does not include the leading \f(CW\*(C`#\*(C'\fR, but does include any
white space immediate after the \f(CW\*(C`#\*(C'\fR when the plan file is parsed. Returns the
empty string if there is no note.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`format_name\*(C'\fI\fR
.IX Subsection "format_name"
.PP
.Vb 1
\&  my $formatted_name = $line\->format_name;
.Ve
.PP
Returns the name of the line properly formatted for output. For
tags, it's the name with a leading \f(CW\*(C`@\*(C'\fR. For all
other lines, it is simply the name.
.PP
\fI\f(CI\*(C`format_operator\*(C'\fI\fR
.IX Subsection "format_operator"
.PP
.Vb 1
\&  my $formatted_operator = $line\->format_operator;
.Ve
.PP
Returns the formatted representation of the operator. This is just the
operator an its associated white space. If neither the operator nor its white
space exists, an empty string is returned. Used internally by \f(CW\*(C`as_string()\*(C'\fR.
.PP
\fI\f(CI\*(C`format_content\*(C'\fI\fR
.IX Subsection "format_content"
.PP
.Vb 1
\&  my $formatted_content $line\->format_content;
.Ve
.PP
Formats and returns the main content of the line. This consists of an operator
and its associated white space, if any, followed by the formatted name.
.PP
\fI\f(CI\*(C`format_note\*(C'\fI\fR
.IX Subsection "format_note"
.PP
.Vb 1
\&  my $note = $line\->format_note;
.Ve
.PP
Returns the note formatted for output. That is, with a leading \f(CW\*(C`#\*(C'\fR and
newlines encoded.
.PP
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
.Vb 1
\&  my $string = $line\->as_string;
.Ve
.PP
Returns the full stringification of the line, suitable for output to a plan
file.
.PP
\fI\f(CI\*(C`request_note\*(C'\fI\fR
.IX Subsection "request_note"
.PP
.Vb 1
\&  my $note = $line\->request_note( for => \*(Aqadd\*(Aq );
.Ve
.PP
Request the note from the user. Pass in the name of the command for which the
note is requested via the \f(CW\*(C`for\*(C'\fR parameter. If there is a note, it is simply
returned. Otherwise, an editor will be launched and the user asked to write
one. Once the editor exits, the note will be retrieved from the file, saved,
and returned. If no note was written, an exception will be thrown with an
\&\f(CW\*(C`exitval\*(C'\fR of 1.
.PP
\fI\f(CI\*(C`note_prompt\*(C'\fI\fR
.IX Subsection "note_prompt"
.PP
.Vb 1
\&  my $prompt = $line\->note_prompt( for => \*(Aqtag\*(Aq );
.Ve
.PP
Returns a localized string for use in the temporary file created by
\&\f(CW\*(C`request_note()\*(C'\fR. Pass in the name of the command for which to prompt via the
\&\f(CW\*(C`for\*(C'\fR parameter.
.SH "See Also"
.IX Header "See Also"
.IP "App::Sqitch::Plan" 4
.IX Item "App::Sqitch::Plan"
Class representing a plan.
.IP "sqitch" 4
.IX Item "sqitch"
The Sqitch command-line client.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
