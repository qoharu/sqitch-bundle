.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Plan::ChangeList 3"
.TH App::Sqitch::Plan::ChangeList 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Plan::ChangeList \- Sqitch deployment plan change list
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 6
\&  my $list = App::Sqitch::Plan::ChangeList\->new(
\&      $add_roles,
\&      $add_users,
\&      $insert_user,
\&      $insert_user2,
\&  );
\&
\&  my @changes = $list\->changes;
\&  my $add_users = $list\->change_at(1);
\&  my $add_users = $list\->get(\*(Aqadd_users\*(Aq);
\&
\&  my $insert_user1 = $list\->get(\*(Aqinsert_user@alpha\*(Aq);
\&  my $insert_user2 = $list\->get(\*(Aqinsert_user\*(Aq);
.Ve
.SH "Description"
.IX Header "Description"
This module is used internally by App::Sqitch::Plan to manage plan changes.
It's modeled on Array::AsHash and Hash::MultiValue, but makes allowances
for finding changes relative to tags.
.SH "Interface"
.IX Header "Interface"
.SS "Constructors"
.IX Subsection "Constructors"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  my $plan = App::Sqitch::Plan::ChangeList\->new( @changes );
.Ve
.PP
Instantiates and returns a App::Sqitch::Plan::ChangeList object with the list of
changes. Each change should be a App::Sqitch::Plan::Change object. Order will be
preserved but the location of each change will be indexed by its name and \s-1ID,\s0 as
well as the names and IDs of any associated tags.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`count\*(C'\fI\fR
.IX Subsection "count"
.PP
.Vb 1
\&  my $count = $changelist\->count;
.Ve
.PP
Returns the number of changes in the list.
.PP
\fI\f(CI\*(C`changes\*(C'\fI\fR
.IX Subsection "changes"
.PP
.Vb 1
\&  my @changes = $changelist\->changes;
.Ve
.PP
Returns all of the changes in the list.
.PP
\fI\f(CI\*(C`tags\*(C'\fI\fR
.IX Subsection "tags"
.PP
.Vb 1
\&  my @tags = $changelist\->tags;
.Ve
.PP
Returns all of the tags associated with changes in the list.
.PP
\fI\f(CI\*(C`items\*(C'\fI\fR
.IX Subsection "items"
.PP
.Vb 1
\&  my @changes = $changelist\->items;
.Ve
.PP
An alias for \f(CW\*(C`changes\*(C'\fR.
.PP
\fI\f(CI\*(C`change_at\*(C'\fI\fR
.IX Subsection "change_at"
.PP
.Vb 1
\&  my $change = $change_list\->change_at(10);
.Ve
.PP
Returns the change at the specified index.
.PP
\fI\f(CI\*(C`index_of\*(C'\fI\fR
.IX Subsection "index_of"
.PP
.Vb 2
\&  my $index = $changelist\->index_of($change_id);
\&  my $index = $changelist\->index_of($change_name);
.Ve
.PP
Returns the index of the change with the specified \s-1ID\s0 or name. The value passed
may be one of these forms:
.IP "\(bu" 4
An \s-1ID\s0
.Sp
.Vb 1
\&  my $index = $changelist\->index_of(\*(Aq6c2f28d125aff1deea615f8de774599acf39a7a1\*(Aq);
.Ve
.Sp
This is the \s-1SHA1 ID\s0 of a change or tag. Currently, the full 40\-character hexed
hash string must be specified.
.IP "\(bu" 4
A change name
.Sp
.Vb 1
\&  my $index = $changelist\->index_of(\*(Aqusers_table\*(Aq);
.Ve
.Sp
The name of a change. Will throw an exception if the more than one change in the
list goes by that name.
.IP "\(bu" 4
A tag name
.Sp
.Vb 1
\&  my $index = $changelist\->index_of(\*(Aq@beta1\*(Aq);
.Ve
.Sp
The name of a tag, including the leading \f(CW\*(C`@\*(C'\fR.
.IP "\(bu" 4
A tag-qualified change name
.Sp
.Vb 1
\&  my $index = $changelist\->index_of(\*(Aqusers_table@beta1\*(Aq);
.Ve
.Sp
The named change as it was last seen in the list before the specified tag.
.PP
\fI\f(CI\*(C`first_index_of\*(C'\fI\fR
.IX Subsection "first_index_of"
.PP
.Vb 2
\&  my $index = $changelist\->first_index_of($change_name);
\&  my $index = $changelist\->first_index_of($change_name, $name);
.Ve
.PP
Returns the index of the first instance of the named change in the list. If a
second argument is passed, the index of the first instance of the change
\&\fIafter\fR the index of the second argument will be returned. This is useful
for getting the index of a change as it was deployed after a particular tag, for
example:
.PP
.Vb 2
\&  my $index = $changelist\->first_index_of(\*(Aqfoo\*(Aq, \*(Aq@beta\*(Aq);
\&  my $index = $changelist\->first_index_of(\*(Aqfoo\*(Aq, \*(Aqusers_table@beta1\*(Aq);
.Ve
.PP
The second argument must unambiguously refer to a single change in the list. As
such, it should usually be a tag name or tag-qualified change name. Returns
\&\f(CW\*(C`undef\*(C'\fR if the change does not appear in the list, or if it does not appear
after the specified second argument change name.
.PP
\fI\f(CI\*(C`last_change\*(C'\fI\fR
.IX Subsection "last_change"
.PP
.Vb 1
\&  my $change = $changelist\->last_change;
.Ve
.PP
Returns the last change to be appear in the list. Returns \f(CW\*(C`undef\*(C'\fR if the list
contains no changes.
.PP
\fI\f(CI\*(C`last_tagged_change\*(C'\fI\fR
.IX Subsection "last_tagged_change"
.PP
.Vb 1
\&  my $change = $changelist\->last_tagged_change;
.Ve
.PP
Returns the last tagged change in the list. Returns \f(CW\*(C`undef\*(C'\fR if the list
contains no tagged changes.
.PP
\fI\f(CI\*(C`index_of_last_tagged\*(C'\fI\fR
.IX Subsection "index_of_last_tagged"
.PP
.Vb 1
\&  my $index = $changelist\->index_of_last_tagged;
.Ve
.PP
Returns the index of the last tagged change in the list. Returns \f(CW\*(C`undef\*(C'\fR if the
list contains no tags.
.PP
\fI\f(CI\*(C`get\*(C'\fI\fR
.IX Subsection "get"
.PP
.Vb 3
\&  my $change = $changelist\->get($id);
\&  my $change = $changelist\->get($change_name);
\&  my $change = $changelist\->get($tag_name);
.Ve
.PP
Returns the change for the specified \s-1ID\s0 or name. The name may be specified as
described for \f(CW\*(C`index_of()\*(C'\fR. An exception will be thrown if more than one change
goes by a specified name. As such, it is best to specify it as unambiguously
as possible: as a tag name, a tag-qualified change name, or an \s-1ID.\s0
.PP
\fI\f(CI\*(C`contains\*(C'\fI\fR
.IX Subsection "contains"
.PP
.Vb 1
\&  say \*(AqYes!\*(Aq if $plan\->contains(\*(Aq6c2f28d125aff1deea615f8de774599acf39a7a1\*(Aq);
.Ve
.PP
Like \f(CW\*(C`index_of()\*(C'\fR, but never throws an exception, and returns true if the
plan contains the specified change, and false if it does not.
.PP
\fI\f(CI\*(C`find\*(C'\fI\fR
.IX Subsection "find"
.PP
.Vb 4
\&  my $change = $changelist\->find($id);
\&  my $change = $changelist\->find($change_name);
\&  my $change = $changelist\->find($tag_name);
\&  my $change = $changelist\->find("$change_name\e@$tag_name");
.Ve
.PP
Tries to find and return a change based on the argument. If no tag is specified,
finds and returns the first instance of the named change. Otherwise, it returns
the change as of the specified tag. Unlike \f(CW\*(C`get()\*(C'\fR, it will not throw an error
if more than one change exists with the specified name, but will return the
first instance.
.PP
\fI\f(CI\*(C`append\*(C'\fI\fR
.IX Subsection "append"
.PP
.Vb 1
\&  $changelist\->append(@changes);
.Ve
.PP
Append one or more changes to the list. Does not check for duplicates, so
use with care.
.PP
\fI\f(CI\*(C`index_tag\*(C'\fI\fR
.IX Subsection "index_tag"
.PP
.Vb 1
\&  $changelist\->index_tag($index, $tag);
.Ve
.PP
Index the tag at the specified index. That is, the tag is assumed to be
associated with the change at the specified index, and so the internal look up
table is updated so that the change at that index can be found via the tag's
name and \s-1ID.\s0
.SH "See Also"
.IX Header "See Also"
.IP "App::Sqitch::Plan" 4
.IX Item "App::Sqitch::Plan"
The Sqitch plan.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
