.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Role::TargetConfigCommand 3"
.TH App::Sqitch::Role::TargetConfigCommand 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Role::TargetConfigCommand \- A command that handles target-related configuration
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&  package App::Sqitch::Command::init;
\&  extends \*(AqApp::Sqitch::Command\*(Aq;
\&  with \*(AqApp::Sqitch::Role::TargetConfigCommand\*(Aq;
.Ve
.SH "Description"
.IX Header "Description"
This role encapsulates the common attributes and methods required by commands
that deal with change script configuration, including script directories and
extensions.
.SH "Interface"
.IX Header "Interface"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`options\*(C'\fI\fR
.IX Subsection "options"
.PP
.Vb 1
\&  my @opts = App::Sqitch::Command::checkout\->options;
.Ve
.PP
Adds options common to the commands that manage script configuration.
.PP
\fI\f(CI\*(C`configure\*(C'\fI\fR
.IX Subsection "configure"
.PP
Configures the options common to commands manage script configuration.
.SS "Attributes"
.IX Subsection "Attributes"
\fI\f(CI\*(C`properties\*(C'\fI\fR
.IX Subsection "properties"
.PP
A hash reference of target configurations. The keys may be as follows:
.ie n .IP """deploy""" 4
.el .IP "\f(CWdeploy\fR" 4
.IX Item "deploy"
.PD 0
.ie n .IP """revert""" 4
.el .IP "\f(CWrevert\fR" 4
.IX Item "revert"
.ie n .IP """verify""" 4
.el .IP "\f(CWverify\fR" 4
.IX Item "verify"
.ie n .IP """reworked""" 4
.el .IP "\f(CWreworked\fR" 4
.IX Item "reworked"
.ie n .IP """reworked_deploy""" 4
.el .IP "\f(CWreworked_deploy\fR" 4
.IX Item "reworked_deploy"
.ie n .IP """reworked_revert""" 4
.el .IP "\f(CWreworked_revert\fR" 4
.IX Item "reworked_revert"
.ie n .IP """reworked_verify""" 4
.el .IP "\f(CWreworked_verify\fR" 4
.IX Item "reworked_verify"
.ie n .IP """extension""" 4
.el .IP "\f(CWextension\fR" 4
.IX Item "extension"
.PD
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`config_target\*(C'\fI\fR
.IX Subsection "config_target"
.PP
.Vb 2
\&  my $target = $cmd\->config_target;
\&  my $target = $cmd\->config_target(%params);
.Ve
.PP
Constructs a target based on the contents of \f(CW\*(C`properties\*(C'\fR. The supported
parameters are:
.ie n .IP """name""" 4
.el .IP "\f(CWname\fR" 4
.IX Item "name"
A target name.
.ie n .IP """uri""" 4
.el .IP "\f(CWuri\fR" 4
.IX Item "uri"
A target \s-1URI.\s0
.ie n .IP """engine""" 4
.el .IP "\f(CWengine\fR" 4
.IX Item "engine"
An engine name.
.PP
The passed target and engine names take highest precedence, falling back on
the properties and the \f(CW\*(C`default_target\*(C'\fR. All other properties are applied to
the target before returning it.
.PP
\fI\f(CI\*(C`write_plan\*(C'\fI\fR
.IX Subsection "write_plan"
.PP
.Vb 1
\&  $cmd\->write_plan(%params);
.Ve
.PP
Writes out the plan file. Supported parameters are:
.ie n .IP """target""" 4
.el .IP "\f(CWtarget\fR" 4
.IX Item "target"
The target for which the plan will be written. Defaults to the target returned
by \f(CW\*(C`config_target()\*(C'\fR.
.ie n .IP """project""" 4
.el .IP "\f(CWproject\fR" 4
.IX Item "project"
The project name. If not passed, the project name will be read from the
default target's plan, if it exists. Otherwise an error will be thrown.
.ie n .IP """uri""" 4
.el .IP "\f(CWuri\fR" 4
.IX Item "uri"
The project \s-1URI.\s0 Optional. If not passed, the \s-1URI\s0 will be read from the
default target's plan, if it exists. Optional.
.PP
\fI\f(CI\*(C`directories_for\*(C'\fI\fR
.IX Subsection "directories_for"
.PP
.Vb 1
\&  my @dirs = $cmd\->directories_for(@targets);
.Ve
.PP
Returns a set of script directories for a list of targets. Options passed to
the command are preferred. Paths are pulled from the command only when they
have not been passed as options.
.PP
\fI\f(CI\*(C`make_directories_for\*(C'\fI\fR
.IX Subsection "make_directories_for"
.PP
.Vb 1
\&  $cmd\->directories_for(@targets);
.Ve
.PP
Creates script directories for one or more targets. Options passed to the
command are preferred. Paths are pulled from the command only when they have
not been passed as options.
.PP
\fI\f(CI\*(C`mkdirs\*(C'\fI\fR
.IX Subsection "mkdirs"
.PP
.Vb 1
\&   $cmd\->directories_for(@dirs);
.Ve
.PP
Creates the list of directories on the file system. Directories that already
exist are skipped. Messages are sent to \f(CW\*(C`info()\*(C'\fR for each directory, and an
error is thrown on the first to fail.
.PP
\fI\f(CI\*(C`config_params\*(C'\fI\fR
.IX Subsection "config_params"
.PP
.Vb 1
\&  my @params = $cmd\->config_params($key);
.Ve
.PP
Returns a list of parameters to pass to the App::Sqitch::Config \f(CW\*(C`set\*(C'\fR
method, built up from the \f(CW\*(C`properties\*(C'\fR.
.SH "See Also"
.IX Header "See Also"
.IP "App::Sqitch::Command::init" 4
.IX Item "App::Sqitch::Command::init"
The \f(CW\*(C`init\*(C'\fR command initializes a Sqitch project, setting up the change script
configuration and directories.
.IP "App::Sqitch::Command::engine" 4
.IX Item "App::Sqitch::Command::engine"
The \f(CW\*(C`engine\*(C'\fR command manages engine configuration, including engine-specific
change script configuration.
.IP "App::Sqitch::Command::target" 4
.IX Item "App::Sqitch::Command::target"
The \f(CW\*(C`engine\*(C'\fR command manages target configuration, including target-specific
change script configuration.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
