.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Command::config 3"
.TH App::Sqitch::Command::config 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Command::config \- Get and set local, user, or system Sqitch options
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 2
\&  my $cmd = App::Sqitch::Command::config\->new(\e%params);
\&  $cmd\->execute;
.Ve
.SH "Description"
.IX Header "Description"
You can query/set/replace/unset Sqitch options with this command. The name is
actually the section and the key separated by a dot, and the value will be
escaped.
.SH "Interface"
.IX Header "Interface"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`options\*(C'\fI\fR
.IX Subsection "options"
.PP
.Vb 1
\&  my @opts = App::Sqitch::Command::config\->options;
.Ve
.PP
Returns a list of Getopt::Long option specifications for the command-line
options for the \f(CW\*(C`config\*(C'\fR command.
.PP
\fI\f(CI\*(C`configure\*(C'\fI\fR
.IX Subsection "configure"
.PP
.Vb 4
\&  my $params = App::Sqitch::Command::config\->configure(
\&      $config,
\&      $options,
\&  );
.Ve
.PP
Processes the configuration and command options and returns a hash suitable
for the constructor. Exits with an error on option specification errors.
.SS "Constructor"
.IX Subsection "Constructor"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  my $config = App::Sqitch::Command::config\->new($params);
.Ve
.PP
Creates and returns a new \f(CW\*(C`config\*(C'\fR command object. The supported parameters
include:
.ie n .IP """sqitch""" 4
.el .IP "\f(CWsqitch\fR" 4
.IX Item "sqitch"
The core Sqitch object.
.ie n .IP """file""" 4
.el .IP "\f(CWfile\fR" 4
.IX Item "file"
Configuration file to read from and write to.
.ie n .IP """action""" 4
.el .IP "\f(CWaction\fR" 4
.IX Item "action"
The action to be executed. May be one of:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`get\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`get\-all\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`get\-regexp\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`set\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`add\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`replace\-all\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`unset\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`unset\-all\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`list\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`edit\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`rename\-section\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`remove\-section\*(C'\fR
.RE
.RS 4
.Sp
If not specified, the action taken by \f(CW\*(C`execute()\*(C'\fR will depend on the number
of arguments passed to it. If only one, the action will be \f(CW\*(C`get\*(C'\fR. If two or
more, the action will be \f(CW\*(C`set\*(C'\fR.
.RE
.ie n .IP """context""" 4
.el .IP "\f(CWcontext\fR" 4
.IX Item "context"
The configuration file context. Must be one of:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`local\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`user\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`system\*(C'\fR
.RE
.RS 4
.RE
.ie n .IP """type""" 4
.el .IP "\f(CWtype\fR" 4
.IX Item "type"
The type to cast a value to be set to or fetched as. May be one of:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`bool\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`int\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`num\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`bool\-or\-int\*(C'\fR
.RE
.RS 4
.Sp
If not specified or \f(CW\*(C`undef\*(C'\fR, no casting will be performed.
.RE
.SS "Instance Methods"
.IX Subsection "Instance Methods"
These methods are mainly provided as utilities for the command subclasses to
use.
.PP
\fI\f(CI\*(C`execute\*(C'\fI\fR
.IX Subsection "execute"
.PP
.Vb 1
\&  $config\->execute($property, $value);
.Ve
.PP
Executes the config command. Pass the name of the property and the value to
be assigned to it, if applicable.
.PP
\fI\f(CI\*(C`get\*(C'\fI\fR
.IX Subsection "get"
.PP
.Vb 2
\&  $config\->get($key);
\&  $config\->get($key, $regex);
.Ve
.PP
Emits the value for the specified key. The optional second argument is a
regular expression that the value to be returned must match. Exits with an
error if the is more than one value for the specified key, or if the key does
not exist.
.PP
\fI\f(CI\*(C`get_all\*(C'\fI\fR
.IX Subsection "get_all"
.PP
.Vb 2
\&  $config\->get_all($key);
\&  $config\->get_all($key, $regex);
.Ve
.PP
Like \f(CW\*(C`get()\*(C'\fR, but emits all of the values for the given key, rather then
exiting with an error when there is more than one value.
.PP
\fI\f(CI\*(C`get_regex\*(C'\fI\fR
.IX Subsection "get_regex"
.PP
.Vb 2
\&  $config\->get_regex($key);
\&  $config\->get_regex($key, $regex);
.Ve
.PP
Like \f(CW\*(C`get_all()\*(C'\fR, but the first parameter is a regular expression that will
be matched against all keys.
.PP
\fI\f(CI\*(C`set\*(C'\fI\fR
.IX Subsection "set"
.PP
.Vb 2
\&  $config\->set($key, $value);
\&  $config\->set($key, $value, $regex);
.Ve
.PP
Sets the value for a key. Exits with an error if the key already exists and
has multiple values.
.PP
\fI\f(CI\*(C`add\*(C'\fI\fR
.IX Subsection "add"
.PP
.Vb 1
\&  $config\->add($key, $value);
.Ve
.PP
Adds a value for a key. If the key already exists, the value will be added as
an additional value.
.PP
\fI\f(CI\*(C`replace_all\*(C'\fI\fR
.IX Subsection "replace_all"
.PP
.Vb 2
\&  $config\->replace_all($key, $value);
\&  $config\->replace_all($key, $value, $regex);
.Ve
.PP
Replace all matching values.
.PP
\fI\f(CI\*(C`unset\*(C'\fI\fR
.IX Subsection "unset"
.PP
.Vb 2
\&  $config\->unset($key);
\&  $config\->unset($key, $regex);
.Ve
.PP
Unsets a key. If the optional second argument is passed, the key will be unset
only if the value matches the regular expression. If the key has multiple
values, \f(CW\*(C`unset()\*(C'\fR will exit with an error.
.PP
\fI\f(CI\*(C`unset_all\*(C'\fI\fR
.IX Subsection "unset_all"
.PP
.Vb 2
\&  $config\->unset_all($key);
\&  $config\->unset_all($key, $regex);
.Ve
.PP
Like \f(CW\*(C`unset()\*(C'\fR, but will not exit with an error if the key has multiple
values.
.PP
\fI\f(CI\*(C`rename_section\*(C'\fI\fR
.IX Subsection "rename_section"
.PP
.Vb 1
\&  $config\->rename_section($old_name, $new_name);
.Ve
.PP
Renames a section. Exits with an error if the section does not exist or if
either name is not a valid section name.
.PP
\fI\f(CI\*(C`remove_section\*(C'\fI\fR
.IX Subsection "remove_section"
.PP
.Vb 1
\&  $config\->remove_section($section);
.Ve
.PP
Removes a section. Exits with an error if the section does not exist.
.PP
\fI\f(CI\*(C`list\*(C'\fI\fR
.IX Subsection "list"
.PP
.Vb 1
\&  $config\->list;
.Ve
.PP
Lists all of the values in the configuration. If the context is \f(CW\*(C`local\*(C'\fR,
\&\f(CW\*(C`user\*(C'\fR, or \f(CW\*(C`system\*(C'\fR, only the settings set for that context will be emitted.
Otherwise, all settings will be listed.
.PP
\fI\f(CI\*(C`edit\*(C'\fI\fR
.IX Subsection "edit"
.PP
.Vb 1
\&  $config\->edit;
.Ve
.PP
Opens the context-specific configuration file in a text editor for direct
editing. If no context is specified, the local config file will be opened. The
editor is determined by \*(L"editor\*(R" in Sqitch.
.SS "Instance Accessors"
.IX Subsection "Instance Accessors"
\fI\f(CI\*(C`file\*(C'\fI\fR
.IX Subsection "file"
.PP
.Vb 1
\&  my $file_name = $config\->file;
.Ve
.PP
Returns the path to the configuration file to be acted upon. If the context is
\&\f(CW\*(C`system\*(C'\fR, then the value returned is \f(CW\*(C`$($etc_prefix)/sqitch.conf\*(C'\fR. If the
context is \f(CW\*(C`user\*(C'\fR, then the value returned is \f(CW\*(C`~/.sqitch/sqitch.conf\*(C'\fR.
Otherwise, the default is \fI./sqitch.conf\fR.
.SH "See Also"
.IX Header "See Also"
.IP "sqitch-config" 4
.IX Item "sqitch-config"
Help for the \f(CW\*(C`config\*(C'\fR command to the Sqitch command-line client.
.IP "sqitch" 4
.IX Item "sqitch"
The Sqitch command-line client.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
