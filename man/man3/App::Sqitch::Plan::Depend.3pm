.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Plan::Depend 3"
.TH App::Sqitch::Plan::Depend 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Plan::Depend \- Sqitch dependency specification
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 4
\&  my $depend = App::Sqitch::Plan::Depend\->new(
\&        plan => $plan,
\&        App::Sqitch::Plan::Depend\->parse(\*(Aq!proj:change@tag\*(Aq)
\&  );
.Ve
.SH "Description"
.IX Header "Description"
An App::Sqitch::Plan::Line represents a single dependency from the dependency
list for a planned change. Is is constructed by App::Sqitch::Plan and
included in App::Sqitch::Plan::Change objects \f(CW\*(C`conflicts\*(C'\fR and \f(CW\*(C`requires\*(C'\fR
attributes.
.SH "Interface"
.IX Header "Interface"
.SS "Constructors"
.IX Subsection "Constructors"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  my $depend = App::Sqitch::Plan::Depend\->new(%params);
.Ve
.PP
Instantiates and returns a App::Sqitch::Plan::Line object. Parameters:
.ie n .IP """plan""" 4
.el .IP "\f(CWplan\fR" 4
.IX Item "plan"
The plan with which the dependency is associated. Required.
.ie n .IP """project""" 4
.el .IP "\f(CWproject\fR" 4
.IX Item "project"
Name of the project. Required.
.ie n .IP """conflicts""" 4
.el .IP "\f(CWconflicts\fR" 4
.IX Item "conflicts"
Boolean to indicate whether the dependency is a conflicting dependency.
.ie n .IP """change""" 4
.el .IP "\f(CWchange\fR" 4
.IX Item "change"
The name of the change.
.ie n .IP """tag""" 4
.el .IP "\f(CWtag\fR" 4
.IX Item "tag"
The name of the tag claimed as the dependency.
.ie n .IP """id""" 4
.el .IP "\f(CWid\fR" 4
.IX Item "id"
The \s-1ID\s0 of a change. Mutually exclusive with \f(CW\*(C`change\*(C'\fR and \f(CW\*(C`tag\*(C'\fR.
.PP
\fI\f(CI\*(C`parse\*(C'\fI\fR
.IX Subsection "parse"
.PP
.Vb 1
\&  my %params = App::Sqitch::Plan::Depend\->parse($string);
.Ve
.PP
Parses a dependency specification as extracted from a plan and returns a hash
reference of parameters suitable for passing to \f(CW\*(C`new()\*(C'\fR. Returns \f(CW\*(C`undef\*(C'\fR if
the string is not a properly-formatted dependency.
.SS "Accessors"
.IX Subsection "Accessors"
\fI\f(CI\*(C`plan\*(C'\fI\fR
.IX Subsection "plan"
.PP
.Vb 1
\&  my $plan = $depend\->plan;
.Ve
.PP
Returns the App::Sqitch::Plan object with which the dependency
specification is associated.
.PP
\fI\f(CI\*(C`conflicts\*(C'\fI\fR
.IX Subsection "conflicts"
.PP
.Vb 1
\&  say $depend\->as_string, \*(Aq conflicts\*(Aq if $depend\->conflicts;
.Ve
.PP
Returns true if the dependency is a conflicting dependency, and false if it
is not (in which case it is a required dependency).
.PP
\fI\f(CI\*(C`required\*(C'\fI\fR
.IX Subsection "required"
.PP
.Vb 1
\&  say $depend\->as_string, \*(Aq required\*(Aq if $depend\->required;
.Ve
.PP
Returns true if the dependency is a required, and false if it is not (in which
case it is a conflicting dependency).
.PP
\fI\f(CI\*(C`type\*(C'\fI\fR
.IX Subsection "type"
.PP
.Vb 1
\&  say $depend\->type;
.Ve
.PP
Returns a string indicating the type of dependency, either \*(L"require\*(R" or
\&\*(L"conflict\*(R".
.PP
\fI\f(CI\*(C`project\*(C'\fI\fR
.IX Subsection "project"
.PP
.Vb 1
\&  my $proj = $depend\->project;
.Ve
.PP
Returns the name of the project with which the dependency is associated.
.PP
\fI\f(CI\*(C`got_project\*(C'\fI\fR
.IX Subsection "got_project"
.PP
Returns true if the \f(CW\*(C`project\*(C'\fR parameter was passed to the constructor with a
defined value, and false if it was not passed to the constructor.
.PP
\fI\f(CI\*(C`change\*(C'\fI\fR
.IX Subsection "change"
.PP
.Vb 1
\&  my $change = $depend\->change;
.Ve
.PP
Returns the name of the change, if any. If \f(CW\*(C`undef\*(C'\fR is returned, the dependency
is a tag-only dependency.
.PP
\fI\f(CI\*(C`tag\*(C'\fI\fR
.IX Subsection "tag"
.PP
.Vb 1
\&  my $tag = $depend\->tag;
.Ve
.PP
Returns the name of the tag, if any. If \f(CW\*(C`undef\*(C'\fR is returned, the dependency
is a change-only dependency.
.PP
\fI\f(CI\*(C`id\*(C'\fI\fR
.IX Subsection "id"
.PP
Returns the \s-1ID\s0 of the change if the dependency was specified as an \s-1ID,\s0 or if
the dependency is a local dependency.
.PP
\fI\f(CI\*(C`got_id\*(C'\fI\fR
.IX Subsection "got_id"
.PP
Returns true if the \f(CW\*(C`id\*(C'\fR parameter was passed to the constructor with a
defined value, and false if it was not passed to the constructor.
.PP
\fI\f(CI\*(C`resolved_id\*(C'\fI\fR
.IX Subsection "resolved_id"
.PP
Change \s-1ID\s0 used by the engine when deploying a change. That is, if the
dependency is in the database, it will be assigned this \s-1ID\s0 from the database.
If it is not in the database, \f(CW\*(C`resolved_id\*(C'\fR will be undef.
.PP
\fI\f(CI\*(C`is_external\*(C'\fI\fR
.IX Subsection "is_external"
.PP
Returns true if the dependency references a change external to the current
project, and false if it is part of the current project.
.PP
\fI\f(CI\*(C`is_internal\*(C'\fI\fR
.IX Subsection "is_internal"
.PP
The opposite of \f(CW\*(C`is_external()\*(C'\fR: returns true if the dependency is in the
internal (current) project, and false if not.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`key_name\*(C'\fI\fR
.IX Subsection "key_name"
.PP
Returns the key name of the dependency, with the change name and/or tag,
properly formatted for passing to the \f(CW\*(C`find()\*(C'\fR method of
App::Sqitch::Plan. If the dependency was specified as an \s-1ID,\s0 rather than a
change or tag, then the \s-1ID\s0 will be returned.
.PP
\fI\f(CI\*(C`as_string\*(C'\fI\fR
.IX Subsection "as_string"
.PP
Returns the project-qualified key name. That is, if there is a project name,
it returns a string with the project name, a colon, and the key name. If there
is no project name, the key name is returned.
.PP
\fI\f(CI\*(C`as_plan_string\*(C'\fI\fR
.IX Subsection "as_plan_string"
.PP
.Vb 1
\&  my $string = $depend\->as_string;
.Ve
.PP
Returns the full stringification of the dependency, suitable for output to a
plan file. That is, the same as \f(CW\*(C`as_string\*(C'\fR unless \f(CW\*(C`conflicts\*(C'\fR returns true,
in which case it is prepended with \*(L"!\*(R".
.SH "See Also"
.IX Header "See Also"
.IP "App::Sqitch::Plan" 4
.IX Item "App::Sqitch::Plan"
Class representing a plan.
.IP "sqitch" 4
.IX Item "sqitch"
The Sqitch command-line client.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
