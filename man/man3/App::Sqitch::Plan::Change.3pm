.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::Sqitch::Plan::Change 3"
.TH App::Sqitch::Plan::Change 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
App::Sqitch::Plan::Change \- Sqitch deployment plan tag
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 4
\&  my $plan = App::Sqitch::Plan\->new( sqitch => $sqitch );
\&  for my $line ($plan\->lines) {
\&      say $line\->as_string;
\&  }
.Ve
.SH "Description"
.IX Header "Description"
A App::Sqitch::Plan::Change represents a change as parsed from a plan file. In
addition to the interface inherited from App::Sqitch::Plan::Line, it offers
interfaces for parsing dependencies from the deploy script, as well as for
opening the deploy, revert, and verify scripts.
.SH "Interface"
.IX Header "Interface"
See App::Sqitch::Plan::Line for the basics.
.SS "Accessors"
.IX Subsection "Accessors"
\fI\f(CI\*(C`since_tag\*(C'\fI\fR
.IX Subsection "since_tag"
.PP
An App::Sqitch::Plan::Tag object representing the last tag to appear in the
plan \fBbefore\fR the change. May be \f(CW\*(C`undef\*(C'\fR.
.PP
\fI\f(CI\*(C`pspace\*(C'\fI\fR
.IX Subsection "pspace"
.PP
Blank space separating the change name from the dependencies, timestamp, and
planner in the file.
.PP
\fI\f(CI\*(C`is_reworked\*(C'\fI\fR
.IX Subsection "is_reworked"
.PP
Boolean indicting whether or not the change has been reworked.
.PP
\fI\f(CI\*(C`info\*(C'\fI\fR
.IX Subsection "info"
.PP
Information about the change, returned as a string. Includes the change \s-1ID,\s0
the name and email address of the user who added the change to the plan, and
the timestamp for when the change was added to the plan.
.PP
\fI\f(CI\*(C`id\*(C'\fI\fR
.IX Subsection "id"
.PP
A \s-1SHA1\s0 hash of the data returned by \f(CW\*(C`info()\*(C'\fR, which can be used as a
globally-unique identifier for the change.
.PP
\fI\f(CI\*(C`timestamp\*(C'\fI\fR
.IX Subsection "timestamp"
.PP
Returns the an App::Sqitch::DateTime object representing the time at which
the change was added to the plan.
.PP
\fI\f(CI\*(C`planner_name\*(C'\fI\fR
.IX Subsection "planner_name"
.PP
Returns the name of the user who added the change to the plan.
.PP
\fI\f(CI\*(C`planner_email\*(C'\fI\fR
.IX Subsection "planner_email"
.PP
Returns the email address of the user who added the change to the plan.
.PP
\fI\f(CI\*(C`parent\*(C'\fI\fR
.IX Subsection "parent"
.PP
Parent change object.
.PP
\fI\f(CI\*(C`tags\*(C'\fI\fR
.IX Subsection "tags"
.PP
A list of tag objects associated with the change.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`path_segments\*(C'\fI\fR
.IX Subsection "path_segments"
.PP
.Vb 1
\&  my @segments = $change\->path_segments;
.Ve
.PP
Returns the path segment for the change. For example, if the change is named
\&\*(L"foo\*(R", \f(CW\*(C`(\*(Aqfoo.sql\*(Aq)\*(C'\fR is returned. If the change is named "functions/bar>
\&\f(CW\*(C`(\*(Aqfunctions\*(Aq, \*(Aqbar.sql\*(Aq)\*(C'\fR is returned. Internally, this data is used to
create the deploy, revert, and verify file names.
.PP
\fI\f(CI\*(C`deploy_dir\*(C'\fI\fR
.IX Subsection "deploy_dir"
.PP
.Vb 1
\&  my $file = $change\->deploy_dir;
.Ve
.PP
Returns the path to the deploy directory for the change.
.PP
\fI\f(CI\*(C`deploy_file\*(C'\fI\fR
.IX Subsection "deploy_file"
.PP
.Vb 1
\&  my $file = $change\->deploy_file;
.Ve
.PP
Returns the path to the deploy script file for the change.
.PP
\fI\f(CI\*(C`revert_dir\*(C'\fI\fR
.IX Subsection "revert_dir"
.PP
.Vb 1
\&  my $file = $change\->revert_dir;
.Ve
.PP
Returns the path to the revert directory for the change.
.PP
\fI\f(CI\*(C`revert_file\*(C'\fI\fR
.IX Subsection "revert_file"
.PP
.Vb 1
\&  my $file = $change\->revert_file;
.Ve
.PP
Returns the path to the revert script file for the change.
.PP
\fI\f(CI\*(C`verify_dir\*(C'\fI\fR
.IX Subsection "verify_dir"
.PP
.Vb 1
\&  my $file = $change\->verify_dir;
.Ve
.PP
Returns the path to the verify directory for the change.
.PP
\fI\f(CI\*(C`verify_file\*(C'\fI\fR
.IX Subsection "verify_file"
.PP
.Vb 1
\&  my $file = $change\->verify_file;
.Ve
.PP
Returns the path to the verify script file for the change.
.PP
\fI\f(CI\*(C`script_file\*(C'\fI\fR
.IX Subsection "script_file"
.PP
.Vb 1
\&  my $file = $sqitch\->script_file($script_name);
.Ve
.PP
Returns the path to a script, for the change.
.PP
\fI\f(CI\*(C`script_hash\*(C'\fI\fR
.IX Subsection "script_hash"
.PP
.Vb 1
\&  my $hash = $change\->script_hash;
.Ve
.PP
Returns the hex digest of the \s-1SHA\-1\s0 hash for the deploy script.
.PP
\fI\f(CI\*(C`rework_tags\*(C'\fI\fR
.IX Subsection "rework_tags"
.PP
.Vb 1
\&  my @tags = $change\->rework_tags;
.Ve
.PP
Returns a list of tags that occur between a change and its next reworking.
Returns an empty list if the change is not reworked.
.PP
\fI\f(CI\*(C`add_tag\*(C'\fI\fR
.IX Subsection "add_tag"
.PP
.Vb 1
\&  $change\->add_tag($tag);
.Ve
.PP
Adds a tag object to the change.
.PP
\fI\f(CI\*(C`add_rework_tags\*(C'\fI\fR
.IX Subsection "add_rework_tags"
.PP
.Vb 1
\&  $change\->add_rework_tags(@tags);
.Ve
.PP
Adds tags to the list of rework tags.
.PP
\fI\f(CI\*(C`clear_rework_tags\*(C'\fI\fR
.IX Subsection "clear_rework_tags"
.PP
.Vb 1
\&  $change\->clear_rework_tags(@tags);
.Ve
.PP
Clears the list of rework tags.
.PP
\fI\f(CI\*(C`requires\*(C'\fI\fR
.IX Subsection "requires"
.PP
.Vb 1
\&  my @requires = $change\->requires;
.Ve
.PP
Returns a list of App::Sqitch::Plan::Depend objects representing changes
required by this change.
.PP
\fI\f(CI\*(C`requires_changes\*(C'\fI\fR
.IX Subsection "requires_changes"
.PP
.Vb 1
\&  my @requires_changes = $change\->requires_changes;
.Ve
.PP
Returns a list of the \f(CW\*(C`App::Sqitch::Plan::Change\*(C'\fR objects representing
changes required by this change.
.PP
\fI\f(CI\*(C`conflicts\*(C'\fI\fR
.IX Subsection "conflicts"
.PP
.Vb 1
\&  my @conflicts = $change\->conflicts;
.Ve
.PP
Returns a list of App::Sqitch::Plan::Depend objects representing changes
with which this change conflicts.
.PP
\fI\f(CI\*(C`conflicts_changes\*(C'\fI\fR
.IX Subsection "conflicts_changes"
.PP
.Vb 1
\&  my @conflicts_changes = $change\->conflicts_changes;
.Ve
.PP
Returns a list of the \f(CW\*(C`App::Sqitch::Plan::Change\*(C'\fR objects representing
changes with which this change conflicts.
.PP
\fI\f(CI\*(C`dependencies\*(C'\fI\fR
.IX Subsection "dependencies"
.PP
.Vb 1
\&  my @dependencies = $change\->dependencies;
.Ve
.PP
Returns a list of App::Sqitch::Plan::Depend objects representing all
dependencies, required and conflicting.
.PP
\fI\f(CI\*(C`is_deploy\*(C'\fI\fR
.IX Subsection "is_deploy"
.PP
Returns true if the change is intended to be deployed, and false if it should be
reverted.
.PP
\fI\f(CI\*(C`is_revert\*(C'\fI\fR
.IX Subsection "is_revert"
.PP
Returns true if the change is intended to be reverted, and false if it should be
deployed.
.PP
\fI\f(CI\*(C`action\*(C'\fI\fR
.IX Subsection "action"
.PP
Returns \*(L"deploy\*(R" if the change should be deployed, or \*(L"revert\*(R" if it should be
reverted.
.PP
\fI\f(CI\*(C`format_tag_qualified_name\*(C'\fI\fR
.IX Subsection "format_tag_qualified_name"
.PP
.Vb 1
\&  my $tag_qualified_name = $change\->format_tag_qualified_name;
.Ve
.PP
Returns a string with the change name followed by the next tag in the plan.
Useful for displaying unambiguous change specifications for reworked changes.
If there is no tag appearing in the file after the change, the \f(CW@HEAD\fR will
be used.
.PP
\fI\f(CI\*(C`format_name_with_tags\*(C'\fI\fR
.IX Subsection "format_name_with_tags"
.PP
.Vb 1
\&  my $name_with_tags = $change\->format_name_with_tags;
.Ve
.PP
Returns a string formatted with the change name followed by the list of tags, if
any, associated with the change. Used to display a change as it is deployed.
.PP
\fI\f(CI\*(C`format_dependencies\*(C'\fI\fR
.IX Subsection "format_dependencies"
.PP
.Vb 1
\&  my $dependencies = $change\->format_dependencies;
.Ve
.PP
Returns a string containing a bracketed list of dependencies. If there are no
dependencies, an empty string will be returned.
.PP
\fI\f(CI\*(C`format_name_with_dependencies\*(C'\fI\fR
.IX Subsection "format_name_with_dependencies"
.PP
.Vb 1
\&  my $name_with_dependencies = $change\->format_name_with_dependencies;
.Ve
.PP
Returns a string formatted with the change name followed by a bracketed list
of dependencies, if any, associated with the change. Used to display a change
when added to a plan.
.PP
\fI\f(CI\*(C`format_op_name_dependencies\*(C'\fI\fR
.IX Subsection "format_op_name_dependencies"
.PP
.Vb 1
\&  my $op_name_dependencies = $change\->format_op_name_dependencies;
.Ve
.PP
Like \f(CW\*(C`format_name_with_dependencies\*(C'\fR, but includes the operator, if present.
.PP
\fI\f(CI\*(C`format_planner\*(C'\fI\fR
.IX Subsection "format_planner"
.PP
.Vb 1
\&  my $planner = $change\->format_planner;
.Ve
.PP
Returns a string formatted with the name and email address of the user who
added the change to the plan.
.PP
\fI\f(CI\*(C`deploy_handle\*(C'\fI\fR
.IX Subsection "deploy_handle"
.PP
.Vb 1
\&  my $fh = $change\->deploy_handle;
.Ve
.PP
Returns an IO::File file handle, opened for reading, for the deploy script
for the change.
.PP
\fI\f(CI\*(C`revert_handle\*(C'\fI\fR
.IX Subsection "revert_handle"
.PP
.Vb 1
\&  my $fh = $change\->revert_handle;
.Ve
.PP
Returns an IO::File file handle, opened for reading, for the revert script
for the change.
.PP
\fI\f(CI\*(C`verify_handle\*(C'\fI\fR
.IX Subsection "verify_handle"
.PP
.Vb 1
\&  my $fh = $change\->verify_handle;
.Ve
.PP
Returns an IO::File file handle, opened for reading, for the verify script
for the change.
.PP
\fI\f(CI\*(C`note_prompt\*(C'\fI\fR
.IX Subsection "note_prompt"
.PP
.Vb 4
\&  my $prompt = $change\->note_prompt(
\&      for     => \*(Aqrework\*(Aq,
\&      scripts => [$change\->deploy_file, $change\->revert_file],
\&  );
.Ve
.PP
Overrides the implementation from \f(CW\*(C`App::Sqitch::Plan::Line\*(C'\fR to add the
\&\f(CW\*(C`files\*(C'\fR parameter. This is a list of the files to be created for the command.
These will usually be the deploy, revert, and verify files, but the caller
might not be creating all of them, so it needs to pass the list.
.SH "See Also"
.IX Header "See Also"
.IP "App::Sqitch::Plan" 4
.IX Item "App::Sqitch::Plan"
Class representing a plan.
.IP "App::Sqitch::Plan::Line" 4
.IX Item "App::Sqitch::Plan::Line"
Base class from which App::Sqitch::Plan::Change inherits.
.IP "sqitch" 4
.IX Item "sqitch"
The Sqitch command-line client.
.SH "Author"
.IX Header "Author"
David E. Wheeler <david@justatheory.com>
.SH "License"
.IX Header "License"
Copyright (c) 2012\-2020 iovation Inc.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.\s0
