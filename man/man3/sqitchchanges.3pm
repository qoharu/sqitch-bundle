.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sqitchchanges 3"
.TH sqitchchanges 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
sqitchchanges \- Specifying changes for Sqitch
.SH "Description"
.IX Header "Description"
Many Sqitch commands take change parameters as arguments. Depending on the
command, they denote a specific change or, for commands which walk change
history or the change plan (such as \f(CW\*(C`sqitch log\*(C'\fR), all changes
which can be reached from that change. Most commands search the plan for the
relevant change, though some, such as \f(CW\*(C`sqitch revert\*(C'\fR and
\&\f(CW\*(C`sqitch log\*(C'\fR, search the database for the change.
.SS "Change Names"
.IX Subsection "Change Names"
A change name, such as that passed to \f(CW\*(C`sqitch add\*(C'\fR and written
to the plan file has a few limitations on the characters it may contain. The
same limitations apply to tag names. The rules are:
.IP "\(bu" 4
Must be at least one character.
.IP "\(bu" 4
Must contain no blank characters.
.IP "\(bu" 4
The first character may not be punctuation.
.IP "\(bu" 4
Last letter may not be punctuation.
.IP "\(bu" 4
Must not end in \*(L"~\*(R", \*(L"^\*(R", \*(L"/\*(R", \*(L"=\*(R", or \*(L"%\*(R" followed by digits.
.IP "\(bu" 4
All other characters may be any \s-1UTF\-8\s0 character other than \*(L":\*(R", \*(L"@\*(R", and \*(L"#\*(R".
.PP
Note that \*(L"_\*(R" (underscore) is never considered punctuation. Some examples of
valid names:
.ie n .IP """foo""" 4
.el .IP "\f(CWfoo\fR" 4
.IX Item "foo"
.PD 0
.ie n .IP "12" 4
.el .IP "\f(CW12\fR" 4
.IX Item "12"
.ie n .IP """t""" 4
.el .IP "\f(CWt\fR" 4
.IX Item "t"
.ie n .IP "6" 4
.el .IP "\f(CW6\fR" 4
.IX Item "6"
.ie n .IP """XXX""" 4
.el .IP "\f(CWXXX\fR" 4
.IX Item "XXX"
.ie n .IP """XXX92""" 4
.el .IP "\f(CWXXX92\fR" 4
.IX Item "XXX92"
.ie n .IP """foo/bar""" 4
.el .IP "\f(CWfoo/bar\fR" 4
.IX Item "foo/bar"
.ie n .IP """beta1""" 4
.el .IP "\f(CWbeta1\fR" 4
.IX Item "beta1"
.ie n .IP """foo_""" 4
.el .IP "\f(CWfoo_\fR" 4
.IX Item "foo_"
.ie n .IP """_foo""" 4
.el .IP "\f(CW_foo\fR" 4
.IX Item "_foo"
.ie n .IP """v1.0\-1b""" 4
.el .IP "\f(CWv1.0\-1b\fR" 4
.IX Item "v1.0-1b"
.ie n .IP """v1.2\-1""" 4
.el .IP "\f(CWv1.2\-1\fR" 4
.IX Item "v1.2-1"
.ie n .IP """v1.2+1""" 4
.el .IP "\f(CWv1.2+1\fR" 4
.IX Item "v1.2+1"
.ie n .IP """v1.2_1""" 4
.el .IP "\f(CWv1.2_1\fR" 4
.IX Item "v1.2_1"
.PD
.PP
Some examples of invalid names:
.ie n .IP """^foo""" 4
.el .IP "\f(CW^foo\fR" 4
.IX Item "^foo"
.PD 0
.ie n .IP """foo^""" 4
.el .IP "\f(CWfoo^\fR" 4
.IX Item "foo^"
.ie n .IP """foo^6""" 4
.el .IP "\f(CWfoo^6\fR" 4
.IX Item "foo^6"
.ie n .IP """foo^666""" 4
.el .IP "\f(CWfoo^666\fR" 4
.IX Item "foo^666"
.ie n .IP "%hi" 4
.el .IP "\f(CW%hi\fR" 4
.IX Item "%hi"
.ie n .IP """hi!""" 4
.el .IP "\f(CWhi!\fR" 4
.IX Item "hi!"
.ie n .IP """foo@bar""" 4
.el .IP "\f(CWfoo@bar\fR" 4
.IX Item "foo@bar"
.ie n .IP """foo:bar""" 4
.el .IP "\f(CWfoo:bar\fR" 4
.IX Item "foo:bar"
.ie n .IP """+foo""" 4
.el .IP "\f(CW+foo\fR" 4
.IX Item "+foo"
.ie n .IP """\-foo""" 4
.el .IP "\f(CW\-foo\fR" 4
.IX Item "-foo"
.ie n .IP "@foo" 4
.el .IP "\f(CW@foo\fR" 4
.IX Item "@foo"
.PD
.SH "Specifying Changes"
.IX Header "Specifying Changes"
A change parameter names a change object. It uses what is called an extended
\&\s-1SHA1\s0 syntax. Here are various ways to spell change names:
.ie n .IP """<change_name>"", e.g., ""users_table""" 4
.el .IP "\f(CW<change_name>\fR, e.g., \f(CWusers_table\fR" 4
.IX Item "<change_name>, e.g., users_table"
The name of a change itself, as it was added to the plan via
\&\f(CW\*(C`sqitch add\*(C'\fR.
.ie n .IP """@<tag_name>"", e.g., @rc1" 4
.el .IP "\f(CW@<tag_name>\fR, e.g., \f(CW@rc1\fR" 4
.IX Item "@<tag_name>, e.g., @rc1"
The change as of the named tag. Tags can be added to the plan via
\&\f(CW\*(C`sqitch tag\*(C'\fR.
.ie n .IP """<change_name>@<tag_name>"", e.g., ""users_table@beta1""" 4
.el .IP "\f(CW<change_name>@<tag_name>\fR, e.g., \f(CWusers_table@beta1\fR" 4
.IX Item "<change_name>@<tag_name>, e.g., users_table@beta1"
The named change as of a tag, also known as a tag-qualified change name. For
change iteration commands (such as \f(CW\*(C`sqitch log\*(C'\fR), this means
the instance of a change with that name before the specified tag. For
dependency parameters (such as in \f(CW\*(C`sqitch add\*(C'\fR), this means any
instance of a change just before that tag, or at any time after the tag.
.ie n .IP """<sha1>"", e.g., ""40763784148fa190d75bad036730ef44d1c2eac6""" 4
.el .IP "\f(CW<sha1>\fR, e.g., \f(CW40763784148fa190d75bad036730ef44d1c2eac6\fR" 4
.IX Item "<sha1>, e.g., 40763784148fa190d75bad036730ef44d1c2eac6"
The change full \s-1SHA1 ID\s0 (40\-byte hexadecimal string). In some cases, such as
\&\f(CW\*(C`sqitch add\*(C'\fR, the \s-1ID\s0 may refer to a change in another Sqitch
project.
.ie n .IP """<project>:<change_name>"", e.g., ""mybase:users_table""" 4
.el .IP "\f(CW<project>:<change_name>\fR, e.g., \f(CWmybase:users_table\fR" 4
.IX Item "<project>:<change_name>, e.g., mybase:users_table"
The name of a change in a specific project. Non\-SHA1 change parameters without
a project prefix are assumed to belong to the current project. Most useful for
declaring a dependency on a change from another project in
\&\f(CW\*(C`sqitch add\*(C'\fR.
.ie n .IP """<project>:@<tag_name>"", e.g., ""mybase:@rc1""" 4
.el .IP "\f(CW<project>:@<tag_name>\fR, e.g., \f(CWmybase:@rc1\fR" 4
.IX Item "<project>:@<tag_name>, e.g., mybase:@rc1"
The name of a tag in an the named project.
.ie n .IP """<project>:<change_name>@<tag_name>"", e.g., ""project:users_table@beta1""" 4
.el .IP "\f(CW<project>:<change_name>@<tag_name>\fR, e.g., \f(CWproject:users_table@beta1\fR" 4
.IX Item "<project>:<change_name>@<tag_name>, e.g., project:users_table@beta1"
A tag-qualified named change in the named project.
.ie n .IP """<project>:<sha1>"", e.g., ""mybase:40763784148fa190d75bad036730ef44d1c2eac6""" 4
.el .IP "\f(CW<project>:<sha1>\fR, e.g., \f(CWmybase:40763784148fa190d75bad036730ef44d1c2eac6\fR" 4
.IX Item "<project>:<sha1>, e.g., mybase:40763784148fa190d75bad036730ef44d1c2eac6"
The full \s-1SHA1 ID\s0 from another project. Probably redundant, since the \s-1SHA1 I\s0
should itself be sufficient. But useful for declaring dependencies in the
current project so that \f(CW\*(C`sqitch add\*(C'\fR or
\&\f(CW\*(C`sqitch rework\*(C'\fR will validate that the specified change is in
the current project.
.ie n .IP "@HEAD" 4
.el .IP "\f(CW@HEAD\fR" 4
.IX Item "@HEAD"
.PD 0
.ie n .IP """HEAD""" 4
.el .IP "\f(CWHEAD\fR" 4
.IX Item "HEAD"
.PD
Special symbolic name for the last change in the plan.
.ie n .IP "@ROOT" 4
.el .IP "\f(CW@ROOT\fR" 4
.IX Item "@ROOT"
.PD 0
.ie n .IP """ROOT""" 4
.el .IP "\f(CWROOT\fR" 4
.IX Item "ROOT"
.PD
Special symbolic name for the first change in the plan.
.ie n .IP """<change>^"", e.g., ""@HEAD^^"", ""@HEAD^3"", ""@beta^2""" 4
.el .IP "\f(CW<change>^\fR, e.g., \f(CW@HEAD^^\fR, \f(CW@HEAD^3\fR, \f(CW@beta^2\fR" 4
.IX Item "<change>^, e.g., @HEAD^^, @HEAD^3, @beta^2"
A suffix \f(CW\*(C`^\*(C'\fR to a symbolic or actual name means the change \fIprior\fR to that
change. Two \f(CW\*(C`^\*(C'\fRs indicate the second prior change. Additional prior changes
can be specified as \f(CW\*(C`^<n>\*(C'\fR, where \f(CW\*(C`<n>\*(C'\fR represents the number of
changes to go back.
.ie n .IP """<change>~"", e.g., ""@ROOT~"", ""@ROOT~~"", ""@bar~4""" 4
.el .IP "\f(CW<change>~\fR, e.g., \f(CW@ROOT~\fR, \f(CW@ROOT~~\fR, \f(CW@bar~4\fR" 4
.IX Item "<change>~, e.g., @ROOT~, @ROOT~~, @bar~4"
A suffix \f(CW\*(C`~\*(C'\fR to a symbolic or actual name means the change \fIafter\fR that
change. Two \f(CW\*(C`~\*(C'\fRs indicate the second following change. Additional following
changes can be specified as \f(CW\*(C`~<n>\*(C'\fR, where \f(CW\*(C`<n>\*(C'\fR represents the
number of changes to go forward.
.SH "Sqitch"
.IX Header "Sqitch"
Part of the sqitch suite.
