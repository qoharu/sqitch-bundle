.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sqitch-bundle 3"
.TH sqitch-bundle 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
sqitch-bundle \- Bundle a Sqitch project for distribution
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 4
\&  sqitch bundle [options
\&  sqitch bundle \-\-dest\-dir widgets\-1.0.0
\&  sqitch bundle \-\-all
\&  sqitch bundle pg mysql
.Ve
.SH "Description"
.IX Header "Description"
This command bundles up a sqitch project for distribution. At its simplest, it
copies the project configuration file, plan files, and all of the change
scripts to a directory. This directory can then be packaged up for
distribution (as a tarball, \s-1RPM,\s0 etc.).
.PP
By default, the \f(CW\*(C`bundle\*(C'\fR command will bundle the plan and scripts for the
default plan and top directory, as defined by the core configuration and
command-line options. Pass the \f(CW\*(C`\-\-all\*(C'\fR option to have it iterate over all
known plans and top directories (as specified for engines and targets) and
bundle them all. This works well for creating a a single bundle with all
plans and scripts.
.PP
To specify which plans an top directories to bundle, pass the target, engine,
or plan file names as arguments. See \*(L"Examples\*(R" for examples.
.IP "\(bu" 4
Engine names
.IP "\(bu" 4
Target names
.IP "\(bu" 4
Plan file names
.PP
The bundle command also allows you to limit bundled changes to a subset of
those in a plan. When bundling a single plan, use the \f(CW\*(C`\-\-from\*(C'\fR and/or \f(CW\*(C`\-\-to\*(C'\fR
options to do the limiting. When using multiple plans, specify the changes
after each target argument. In either case, the changes can be specified in
any way documented on sqitchchanges. See \*(L"Examples\*(R" for examples.
.SH "Options"
.IX Header "Options"
.ie n .IP """\-\-dest\-dir""" 4
.el .IP "\f(CW\-\-dest\-dir\fR" 4
.IX Item "--dest-dir"
.PD 0
.ie n .IP """\-\-dir""" 4
.el .IP "\f(CW\-\-dir\fR" 4
.IX Item "--dir"
.PD
The name of the directory in which to bundle the project. The configuration
file will be created in this directory, and all top, deploy, revert, and
verify directories will be created relative to it. Defaults to \fIbundle\fR.
.ie n .IP """\-\-from""" 4
.el .IP "\f(CW\-\-from\fR" 4
.IX Item "--from"
The change from which to start bundling. If you need to bundle up only a subset
of a plan, specify a change (using a supported change specification
from which to start the bundling via this option. This option is probably only
useful when bundling a single plan.
.ie n .IP """\-\-to""" 4
.el .IP "\f(CW\-\-to\fR" 4
.IX Item "--to"
The change to which to end bundling. If you need to bundle up only a subset
of a plan, specify a change (using a supported change specification
that should be the last change to be included in the bundle. This option is
probably only useful when bundling a single plan.
.ie n .IP """\-a""" 4
.el .IP "\f(CW\-a\fR" 4
.IX Item "-a"
.PD 0
.ie n .IP """\-\-all""" 4
.el .IP "\f(CW\-\-all\fR" 4
.IX Item "--all"
.PD
Bundle all the project plans and their associated scripts. Cannot be mixed
with target, engine, or plan file name arguments; doing so will result in an
error. Useful for multi-plan projects that should have all the plans bundled
together. Overrides the value of the \f(CW\*(C`bundle.all\*(C'\fR configuration; use
\&\f(CW\*(C`\-\-no\-all\*(C'\fR to override a true \f(CW\*(C`bundle.all\*(C'\fR configuration.
.ie n .IP """\-\-plan\-file""" 4
.el .IP "\f(CW\-\-plan\-file\fR" 4
.IX Item "--plan-file"
.PD 0
.ie n .IP """\-f""" 4
.el .IP "\f(CW\-f\fR" 4
.IX Item "-f"
.PD
Path to the deployment plan file. Overrides target, engine, and core
configuration values. Defaults to \fI\f(CI$top_dir\fI/sqitch.plan\fR.
.SH "Configuration Variables"
.IX Header "Configuration Variables"
.ie n .IP """bundle.dest_dir""" 4
.el .IP "\f(CWbundle.dest_dir\fR" 4
.IX Item "bundle.dest_dir"
The name of the directory in which to bundle the project.
.SH "Examples"
.IX Header "Examples"
Bundle a Sqitch project with the default plan and scripts into \fIbundle\fR:
.PP
.Vb 1
\&  sqitch bundle
.Ve
.PP
Bundle a Sqitch project with all plans and scripts into \fIbundle\fR:
.PP
.Vb 1
\&  sqitch bundle \-\-all
.Ve
.PP
Bundle a Sqitch project into \fIBUILDROOT/MyProj\fR:
.PP
.Vb 1
\&  sqitch bundle \-\-dest\-dir BUILDROOT/MyProj
.Ve
.PP
Bundle a project including changes \f(CW\*(C`adduser\*(C'\fR through \f(CW\*(C`@v1.0\*(C'\fR:
.PP
.Vb 1
\&  sqitch bundle \-\-from adduser \-\-to @v1.0
.Ve
.PP
Bundle a the \f(CW\*(C`pg\*(C'\fR engine plans with changes \f(CW\*(C`adduser\*(C'\fR through \f(CW\*(C`@v1.0\*(C'\fR, and
the \f(CW\*(C`sqlite\*(C'\fR engine with changes from the start of the plan up to \f(CW\*(C`widgets\*(C'\fR:
.PP
.Vb 1
\&  sqitch bundle pg adduser @v1.0 sqlite @ROOT wigets
.Ve
.PP
Bundle just the files necessary to execute the plan for the \f(CW\*(C`pg\*(C'\fR engine:
.PP
.Vb 1
\&  sqitch bundle pg
.Ve
.PP
Bundle the files necessary for two plan files:
.PP
.Vb 1
\&  sqitch bundle sqlite/sqitch.plan mysql/sqitch.plan
.Ve
.SH "Sqitch"
.IX Header "Sqitch"
Part of the sqitch suite.
