.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "sqitch-init 3"
.TH sqitch-init 3 "2021-09-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
sqitch-init \- Create a new Sqitch project
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 2
\&  sqitch init <project>
\&  sqitch init <project> \-\-uri <uri>
.Ve
.SH "Description"
.IX Header "Description"
This command creates an new Sqitch project \*(-- basically a \fIsqitch.conf\fR file,
a \fIsqitch.plan\fR file, and \fIdeploy\fR, \fIrevert\fR, and \fIverify\fR subdirectories.
.PP
Running sqitch init in an existing project is safe. It will not overwrite
things that are already there.
.SH "Options"
.IX Header "Options"
.ie n .IP """\-\-uri""" 4
.el .IP "\f(CW\-\-uri\fR" 4
.IX Item "--uri"
.Vb 1
\&  sqitch init widgets \-\-uri https://github.com/me/wigets
.Ve
.Sp
Optional \s-1URI\s0 to associate with the project. If present, the \s-1URI\s0 will be
written to the project plan and used for added uniqueness in hashed object
IDs, as well as to prevent the deployment of another project with the same
name but different \s-1URI.\s0
.ie n .IP """\-\-engine""" 4
.el .IP "\f(CW\-\-engine\fR" 4
.IX Item "--engine"
.Vb 1
\&  sqitch init widgets \-\-engine pg
.Ve
.Sp
Specifies the default database engine to use in the project. Supported engines
include:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`pg\*(C'\fR \- PostgreSQL <https://postgresql.org/> and Postgres-XC <https://sourceforge.net/>
.IP "\(bu" 4
\&\f(CW\*(C`sqlite\*(C'\fR \- SQLite <https://sqlite.org/>
.IP "\(bu" 4
\&\f(CW\*(C`oracle\*(C'\fR \- Oracle <https://www.oracle.com/us/products/database/>
.IP "\(bu" 4
\&\f(CW\*(C`mysql\*(C'\fR \- MySQL <https://dev.mysql.com/> and MariaDB <https://mariadb.com/>
.IP "\(bu" 4
\&\f(CW\*(C`firebird\*(C'\fR \- Firebird <https://www.firebirdsql.org/>
.IP "\(bu" 4
\&\f(CW\*(C`vertica\*(C'\fR \- Vertica <https://my.vertica.com/>
.IP "\(bu" 4
\&\f(CW\*(C`exasol\*(C'\fR \- Exasol <https://www.exasol.com/>
.IP "\(bu" 4
\&\f(CW\*(C`snowflake\*(C'\fR \- Snowflake <https://www.snowflake.net/>
.RE
.RS 4
.RE
.ie n .IP """\-\-top\-dir""" 4
.el .IP "\f(CW\-\-top\-dir\fR" 4
.IX Item "--top-dir"
.Vb 1
\&  sqitch init widgets \-\-top\-dir sql
.Ve
.Sp
Specifies the top directory to use for the project. Typically contains the
deployment plan file and the change script directories.
.ie n .IP """\-\-plan\-file""" 4
.el .IP "\f(CW\-\-plan\-file\fR" 4
.IX Item "--plan-file"
.PD 0
.ie n .IP """\-f""" 4
.el .IP "\f(CW\-f\fR" 4
.IX Item "-f"
.PD
.Vb 1
\&  sqitch init widgets \-\-plan\-file my.plan
.Ve
.Sp
Specifies the path to the deployment plan file. Defaults to
\&\f(CW\*(C`$top_dir/sqitch.plan\*(C'\fR.
.ie n .IP """\-\-extension""" 4
.el .IP "\f(CW\-\-extension\fR" 4
.IX Item "--extension"
.Vb 1
\&  sqitch init widgets \-\-extension ddl
.Ve
.Sp
Specifies the file name extension to use for change script file names.
Defaults to \f(CW\*(C`sql\*(C'\fR.
.ie n .IP """\-\-dir""" 4
.el .IP "\f(CW\-\-dir\fR" 4
.IX Item "--dir"
.Vb 1
\&  sqitch init widgets \-\-dir deploy=dep \-\-dir revert=rev \-\-dir verify=tst
.Ve
.Sp
Sets the path to a script directory. May be specified multiple times.
Supported keys are:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`deploy\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`revert\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`verify\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_deploy\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_revert\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_verify\*(C'\fR
.RE
.RS 4
.RE
.ie n .IP """\-\-target""" 4
.el .IP "\f(CW\-\-target\fR" 4
.IX Item "--target"
.Vb 1
\&  sqitch init widgets \-\-target db:pg:widgets
.Ve
.Sp
Specifies the name or \s-1URI\s0 <https://github.com/libwww-perl/uri-db/> of the default
target database. If specified as a name, the default \s-1URI\s0 for the target will
be \f(CW\*(C`db:$engine:\*(C'\fR.
.ie n .IP """\-\-registry""" 4
.el .IP "\f(CW\-\-registry\fR" 4
.IX Item "--registry"
.Vb 1
\&  sqitch init widgets \-\-registry meta
.Ve
.Sp
Specifies the name of the database object where Sqitch's state and history
data is stored. Typically a schema name (as in PostgreSQL and Oracle) or a
database name (as in SQLite and MySQL). Defaults to \f(CW\*(C`sqitch\*(C'\fR.
.ie n .IP """\-\-client""" 4
.el .IP "\f(CW\-\-client\fR" 4
.IX Item "--client"
.Vb 1
\&  sqitch init widgets \-\-client /usr/local/pgsql/bin/psql
.Ve
.Sp
Specifies the path to the command-line client for the database engine.
Defaults to a client in the current path named appropriately for the specified
engine.
.SH "Configuration"
.IX Header "Configuration"
The most important thing \f(CW\*(C`sqitch init\*(C'\fR does is create the project plan file,
\&\fIsqitch.conf\fR. The options determine what gets written to the file:
.ie n .IP """\-\-engine""" 4
.el .IP "\f(CW\-\-engine\fR" 4
.IX Item "--engine"
Sets the \f(CW\*(C`core.engine\*(C'\fR configuration variable.
.ie n .IP """\-\-top\-dir""" 4
.el .IP "\f(CW\-\-top\-dir\fR" 4
.IX Item "--top-dir"
Sets the \f(CW\*(C`core.top_dir\*(C'\fR configuration variable.
.ie n .IP """\-\-plan\-file""" 4
.el .IP "\f(CW\-\-plan\-file\fR" 4
.IX Item "--plan-file"
.PD 0
.ie n .IP """\-f""" 4
.el .IP "\f(CW\-f\fR" 4
.IX Item "-f"
.PD
Sets the \f(CW\*(C`core.plan_file\*(C'\fR configuration variable.
.ie n .IP """\-\-extension""" 4
.el .IP "\f(CW\-\-extension\fR" 4
.IX Item "--extension"
Sets the \f(CW\*(C`core.extension\*(C'\fR configuration variable.
.ie n .IP """\-\-dir""" 4
.el .IP "\f(CW\-\-dir\fR" 4
.IX Item "--dir"
Sets the following configuration variables:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`deploy\*(C'\fR sets \f(CW\*(C`core.deploy_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`revert\*(C'\fR sets \f(CW\*(C`core.revert_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`verify\*(C'\fR sets \f(CW\*(C`core.verify_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked\*(C'\fR sets \f(CW\*(C`core.reworked_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_deplpoy\*(C'\fR sets \f(CW\*(C`core.reworked_deploy_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_deplpoy\*(C'\fR sets \f(CW\*(C`core.reworked_revert_dir\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`reworked_deplpoy\*(C'\fR sets \f(CW\*(C`core.reworked_verify_dir\*(C'\fR
.RE
.RS 4
.RE
.ie n .IP """\-\-target""" 4
.el .IP "\f(CW\-\-target\fR" 4
.IX Item "--target"
Sets the \f(CW\*(C`engine.$engine.target\*(C'\fR configuration variable if \f(CW\*(C`\-\-engine\*(C'\fR is
also passed and, if it's a target name, \f(CW\*(C`target.$target.uri\*(C'\fR
.ie n .IP """\-\-registry""" 4
.el .IP "\f(CW\-\-registry\fR" 4
.IX Item "--registry"
Sets the \f(CW\*(C`engine.$engine.registry\*(C'\fR configuration variable if \f(CW\*(C`\-\-engine\*(C'\fR is also
passed.
.ie n .IP """\-\-client""" 4
.el .IP "\f(CW\-\-client\fR" 4
.IX Item "--client"
Sets the \f(CW\*(C`engine.$engine.client\*(C'\fR configuration variable if \f(CW\*(C`\-\-engine\*(C'\fR is
also passed.
.ie n .IP """\-s""" 4
.el .IP "\f(CW\-s\fR" 4
.IX Item "-s"
.PD 0
.ie n .IP """\-\-set""" 4
.el .IP "\f(CW\-\-set\fR" 4
.IX Item "--set"
.PD
Set a variable name and value for use by the database engine client, if it
supports variables. The format must be \f(CW\*(C`name=value\*(C'\fR, e.g.,
\&\f(CW\*(C`\-\-set defuser=\*(AqHomer Simpson\*(Aq\*(C'\fR. Variables are set in \f(CW\*(C`core.variables\*(C'\fR.
.PP
As a general rule, you likely won't need any of these options except for
\&\f(CW\*(C`\-\-engine\*(C'\fR, since many commands need to know what engine to use, and
specifying it on the command-line forever after would be annoying.
.PP
These variables will only be written if their corresponding options are
specified. Otherwise, core options get written as comments with user or system
configuration settings, or, failing any values from those locations, from
their default values. If no defaults are specified, they will still be
written, commented out, with a bar \f(CW\*(C`=\*(C'\fR and no value. This allows one to know
what sorts of things are available to edit.
.SH "Examples"
.IX Header "Examples"
Start a new Sqitch project named \*(L"quack\*(R" using the SQLite engine, setting the
top directory for the project to \fIsqlite\fR:
.PP
.Vb 1
\&  sqitch init \-\-engine sqlite \-\-top\-dir sqlite quack
.Ve
.PP
Start a new Sqitch project named \*(L"bey\*(R" using the PostgreSQL engine, setting
the top directory to \fIpostgres\fR, script extension to \f(CW\*(C`ddl\*(C'\fR, reworked
directory to \f(CW\*(C`reworked\*(C'\fR and a version-specific client:
.PP
.Vb 5
\&  sqitch init \-\-engine  pg \e
\&              \-\-top\-dir postgres \e
\&              \-\-client  /opt/pgsql\-9.1/bin/psql \e
\&              \-\-extension ddl \-\-dir reworked=reworked \e
\&              bey
.Ve
.SH "See Also"
.IX Header "See Also"
.IP "sqitch-configuration" 4
.IX Item "sqitch-configuration"
Describes how Sqitch hierarchical engine and target configuration works.
.IP "sqitch-engine" 4
.IX Item "sqitch-engine"
Command to manage database engine configuration.
.IP "sqitch-target" 4
.IX Item "sqitch-target"
Command to manage target database configuration.
.IP "sqitch-config" 4
.IX Item "sqitch-config"
Command to manage all Sqitch configuration.
.SH "Sqitch"
.IX Header "Sqitch"
Part of the sqitch suite.
